{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNauUXcN5WNBW9mJ1ErHmke",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sgevatschnaider/BigData-Graphs-Evo-CA-Classroom/blob/main/src/classroom/graphs/python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Material Elaborado por Sergio Gevatschnaider</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: 'Georgia', serif;\n",
        "            line-height: 1.8;\n",
        "            margin: 20px;\n",
        "            padding: 20px;\n",
        "            background-color: #f9f9f9;\n",
        "            background-image: url('https://www.transparenttextures.com/patterns/light-paper-fibers.png');\n",
        "            background-size: cover;\n",
        "            background-attachment: fixed;\n",
        "            background-blend-mode: lighten;\n",
        "            padding-top: 60px;\n",
        "        }\n",
        "        .navbar {\n",
        "            background-color: #0066cc;\n",
        "            color: white;\n",
        "            padding: 10px 15px;\n",
        "            text-align: center;\n",
        "            font-size: 1.2em;\n",
        "            position: fixed;\n",
        "            width: 100%;\n",
        "            top: 0;\n",
        "            left: 0;\n",
        "            z-index: 1000;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #333;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "            font-family: 'Arial', sans-serif;\n",
        "        }\n",
        "        h2, h3 {\n",
        "            cursor: pointer;\n",
        "            color: #0066cc;\n",
        "        }\n",
        "        .hidden-content {\n",
        "            display: none;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .toggle-button {\n",
        "            display: inline-block;\n",
        "            cursor: pointer;\n",
        "            color: #0066cc;\n",
        "            font-size: 0.9em;\n",
        "        }\n",
        "        .download-link {\n",
        "            background-color: #ff5722;\n",
        "            color: white;\n",
        "            padding: 12px 20px;\n",
        "            font-size: 1.1em;\n",
        "            display: inline-block;\n",
        "            border-radius: 8px;\n",
        "            text-decoration: none;\n",
        "            transition: background-color 0.3s ease;\n",
        "            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n",
        "        }\n",
        "        .download-link:hover {\n",
        "            background-color: #e64a19;\n",
        "            box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15);\n",
        "        }\n",
        "        .card {\n",
        "            background-color: #ffffff;\n",
        "            border-radius: 8px;\n",
        "            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n",
        "            padding: 20px;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        .divider {\n",
        "            height: 2px;\n",
        "            background-color: #e0e0e0;\n",
        "            margin: 30px 0;\n",
        "            border-radius: 4px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "    <div class=\"navbar\">\n",
        "        Material de Big Data - Universidad de Palermo\n",
        "    </div>\n",
        "\n",
        "    <h1>Material Elaborado por Sergio Gevatschnaider</h1>\n",
        "    <p>Clase de Big Data de la Universidad de Palermo</p>\n",
        "    <p>Basado en el libro <em>Introduction to Graph Theory: A Short Course in Graph Theory</em> por Jacques Verstraete</p>\n",
        "    <p>\n",
        "        <!-- Botón de descarga para el libro -->\n",
        "        <a href=\"https://cseweb.ucsd.edu/~dakane/Math154/154-textbook.pdf\" target=\"_blank\" class=\"download-link\">Descargar libro</a>\n",
        "    </p>\n",
        "\n",
        "    <div class=\"divider\"></div>\n",
        "\n",
        "    <div class=\"card\">\n",
        "        <h2>Índice: Optimización de Grafos en Big Data con el Algoritmo de Dijkstra</h2>\n",
        "        <ul>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Introducción a los Grafos en Big Data</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Definición de grafos en el contexto de Big Data</li>\n",
        "                    <li>Escalabilidad y complejidad de grafos en entornos masivos</li>\n",
        "                    <li>Aplicaciones en redes sociales, logística, y transporte</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">El Algoritmo de Dijkstra</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Fundamentos y funcionamiento del algoritmo de Dijkstra</li>\n",
        "                    <li>Uso de estructuras de datos como colas de prioridad</li>\n",
        "                    <li>Limitaciones del algoritmo en entornos de Big Data</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Desafíos del Algoritmo de Dijkstra en Big Data</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Escalabilidad y procesamiento en grafos con millones de nodos</li>\n",
        "                    <li>Adaptación para el procesamiento paralelo</li>\n",
        "                    <li>Optimización de rutas y redes</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Introducción a Pregel</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Origen y propósito de Pregel</li>\n",
        "                    <li>Modelo \"vertex-centric\"</li>\n",
        "                    <li>Superpasos y procesamiento paralelo</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Apache Giraph: Adaptación de Pregel en Big Data</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Inspiración en Pregel</li>\n",
        "                    <li>Implementación sobre Hadoop</li>\n",
        "                    <li>Ventajas de Giraph en Big Data</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Adaptación del Algoritmo de Dijkstra en Apache Giraph y Pregel</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Optimización de cálculo de rutas</li>\n",
        "                    <li>División de tareas en modelo distribuido</li>\n",
        "                    <li>Ejemplos en redes complejas</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Aplicaciones de Dijkstra Adaptado en Big Data</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Optimización en sistemas logísticos</li>\n",
        "                    <li>Conexiones en redes sociales</li>\n",
        "                    <li>Uso en redes de transporte</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Visualización del Algoritmo de Dijkstra en Grafos Distribuidos</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Colores y estados en visualización</li>\n",
        "                    <li>Representación de nodos y aristas</li>\n",
        "                    <li>Visualización en redes complejas</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "            <li>\n",
        "                <span class=\"toggle-button\">Conclusiones y Futuro del Algoritmo de Dijkstra en Big Data</span>\n",
        "                <ul class=\"hidden-content\">\n",
        "                    <li>Versatilidad de Dijkstra</li>\n",
        "                    <li>Innovación y evolución en herramientas de grafos</li>\n",
        "                    <li>Retos futuros en redes distribuidas</li>\n",
        "                </ul>\n",
        "            </li>\n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        document.querySelectorAll('.toggle-button').forEach(button => {\n",
        "            button.addEventListener('click', () => {\n",
        "                const content = button.nextElementSibling;\n",
        "                if (content.style.display === 'none' || content.style.display === '') {\n",
        "                    content.style.display = 'block';\n",
        "                } else {\n",
        "                    content.style.display = 'none';\n",
        "                }\n",
        "            });\n",
        "        });\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "PxgQcG2E3IwT",
        "outputId": "ad770584-01c4-4ed5-bdf8-0050e0315af6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Material Elaborado por Sergio Gevatschnaider</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: 'Georgia', serif;\n",
              "            line-height: 1.8;\n",
              "            margin: 20px;\n",
              "            padding: 20px;\n",
              "            background-color: #f9f9f9;\n",
              "            background-image: url('https://www.transparenttextures.com/patterns/light-paper-fibers.png');\n",
              "            background-size: cover;\n",
              "            background-attachment: fixed;\n",
              "            background-blend-mode: lighten;\n",
              "            padding-top: 60px;\n",
              "        }\n",
              "        .navbar {\n",
              "            background-color: #0066cc;\n",
              "            color: white;\n",
              "            padding: 10px 15px;\n",
              "            text-align: center;\n",
              "            font-size: 1.2em;\n",
              "            position: fixed;\n",
              "            width: 100%;\n",
              "            top: 0;\n",
              "            left: 0;\n",
              "            z-index: 1000;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #333;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "            font-family: 'Arial', sans-serif;\n",
              "        }\n",
              "        h2, h3 {\n",
              "            cursor: pointer;\n",
              "            color: #0066cc;\n",
              "        }\n",
              "        .hidden-content {\n",
              "            display: none;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .toggle-button {\n",
              "            display: inline-block;\n",
              "            cursor: pointer;\n",
              "            color: #0066cc;\n",
              "            font-size: 0.9em;\n",
              "        }\n",
              "        .download-link {\n",
              "            background-color: #ff5722;\n",
              "            color: white;\n",
              "            padding: 12px 20px;\n",
              "            font-size: 1.1em;\n",
              "            display: inline-block;\n",
              "            border-radius: 8px;\n",
              "            text-decoration: none;\n",
              "            transition: background-color 0.3s ease;\n",
              "            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n",
              "        }\n",
              "        .download-link:hover {\n",
              "            background-color: #e64a19;\n",
              "            box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.15);\n",
              "        }\n",
              "        .card {\n",
              "            background-color: #ffffff;\n",
              "            border-radius: 8px;\n",
              "            box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);\n",
              "            padding: 20px;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        .divider {\n",
              "            height: 2px;\n",
              "            background-color: #e0e0e0;\n",
              "            margin: 30px 0;\n",
              "            border-radius: 4px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "    <div class=\"navbar\">\n",
              "        Material de Big Data - Universidad de Palermo\n",
              "    </div>\n",
              "\n",
              "    <h1>Material Elaborado por Sergio Gevatschnaider</h1>\n",
              "    <p>Clase de Big Data de la Universidad de Palermo</p>\n",
              "    <p>Basado en el libro <em>Introduction to Graph Theory: A Short Course in Graph Theory</em> por Jacques Verstraete</p>\n",
              "    <p>\n",
              "        <!-- Botón de descarga para el libro -->\n",
              "        <a href=\"https://cseweb.ucsd.edu/~dakane/Math154/154-textbook.pdf\" target=\"_blank\" class=\"download-link\">Descargar libro</a>\n",
              "    </p>\n",
              "\n",
              "    <div class=\"divider\"></div>\n",
              "\n",
              "    <div class=\"card\">\n",
              "        <h2>Índice: Optimización de Grafos en Big Data con el Algoritmo de Dijkstra</h2>\n",
              "        <ul>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Introducción a los Grafos en Big Data</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Definición de grafos en el contexto de Big Data</li>\n",
              "                    <li>Escalabilidad y complejidad de grafos en entornos masivos</li>\n",
              "                    <li>Aplicaciones en redes sociales, logística, y transporte</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">El Algoritmo de Dijkstra</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Fundamentos y funcionamiento del algoritmo de Dijkstra</li>\n",
              "                    <li>Uso de estructuras de datos como colas de prioridad</li>\n",
              "                    <li>Limitaciones del algoritmo en entornos de Big Data</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Desafíos del Algoritmo de Dijkstra en Big Data</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Escalabilidad y procesamiento en grafos con millones de nodos</li>\n",
              "                    <li>Adaptación para el procesamiento paralelo</li>\n",
              "                    <li>Optimización de rutas y redes</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Introducción a Pregel</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Origen y propósito de Pregel</li>\n",
              "                    <li>Modelo \"vertex-centric\"</li>\n",
              "                    <li>Superpasos y procesamiento paralelo</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Apache Giraph: Adaptación de Pregel en Big Data</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Inspiración en Pregel</li>\n",
              "                    <li>Implementación sobre Hadoop</li>\n",
              "                    <li>Ventajas de Giraph en Big Data</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Adaptación del Algoritmo de Dijkstra en Apache Giraph y Pregel</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Optimización de cálculo de rutas</li>\n",
              "                    <li>División de tareas en modelo distribuido</li>\n",
              "                    <li>Ejemplos en redes complejas</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Aplicaciones de Dijkstra Adaptado en Big Data</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Optimización en sistemas logísticos</li>\n",
              "                    <li>Conexiones en redes sociales</li>\n",
              "                    <li>Uso en redes de transporte</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Visualización del Algoritmo de Dijkstra en Grafos Distribuidos</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Colores y estados en visualización</li>\n",
              "                    <li>Representación de nodos y aristas</li>\n",
              "                    <li>Visualización en redes complejas</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "            <li>\n",
              "                <span class=\"toggle-button\">Conclusiones y Futuro del Algoritmo de Dijkstra en Big Data</span>\n",
              "                <ul class=\"hidden-content\">\n",
              "                    <li>Versatilidad de Dijkstra</li>\n",
              "                    <li>Innovación y evolución en herramientas de grafos</li>\n",
              "                    <li>Retos futuros en redes distribuidas</li>\n",
              "                </ul>\n",
              "            </li>\n",
              "        </ul>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        document.querySelectorAll('.toggle-button').forEach(button => {\n",
              "            button.addEventListener('click', () => {\n",
              "                const content = button.nextElementSibling;\n",
              "                if (content.style.display === 'none' || content.style.display === '') {\n",
              "                    content.style.display = 'block';\n",
              "                } else {\n",
              "                    content.style.display = 'none';\n",
              "                }\n",
              "            });\n",
              "        });\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML estilizado\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Introducción a los Grafos en Big Data</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 2em;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        h3 {\n",
        "            color: #0056b3;\n",
        "            font-size: 1.6em;\n",
        "            margin-top: 25px;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            margin-left: 20px;\n",
        "            font-size: 1.1em;\n",
        "            list-style-type: disc;\n",
        "        }\n",
        "        li {\n",
        "            margin-bottom: 10px;\n",
        "        }\n",
        "        .application {\n",
        "            margin-top: 20px;\n",
        "            padding: 15px;\n",
        "            background-color: #eaf2fd;\n",
        "            border-left: 5px solid #0056b3;\n",
        "        }\n",
        "        .section-title {\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            font-weight: bold;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "    <h1>Introducción a los Grafos en Big Data</h1>\n",
        "\n",
        "    <h2 class=\"section-title\">1.1 Definición de grafos en el contexto de Big Data</h2>\n",
        "    <p>En el ámbito de Big Data, un <strong>grafo</strong> es una estructura matemática que representa un conjunto de elementos\n",
        "    (denominados <strong>nodos</strong> o <strong>vértices</strong>) y sus relaciones (llamadas <strong>aristas</strong> o <strong>enlaces</strong>).\n",
        "    Los grafos son herramientas fundamentales para modelar relaciones complejas entre entidades y son especialmente útiles en grandes volúmenes de datos debido a su capacidad para estructurar y conectar información diversa.</p>\n",
        "\n",
        "    <p>En términos prácticos, los grafos permiten representar cualquier sistema en el que existan relaciones directas o indirectas entre entidades.\n",
        "    Por ejemplo:</p>\n",
        "    <ul>\n",
        "        <li><strong>Red social:</strong> los nodos representan personas y las aristas representan las conexiones de amistad.</li>\n",
        "        <li><strong>Sistema de transporte:</strong> los nodos representan estaciones o paradas, y las aristas, las rutas directas entre ellas.</li>\n",
        "        <li><strong>Sistema de recomendación:</strong> los nodos pueden ser productos y usuarios, y las aristas representan las preferencias o interacciones.</li>\n",
        "    </ul>\n",
        "\n",
        "    <p>Dentro del contexto de Big Data, los grafos suelen ser de gran tamaño y contener relaciones densas y complejas,\n",
        "    por lo cual su análisis eficiente es crucial. Los grafos de gran escala pueden almacenar millones de nodos y billones de aristas,\n",
        "    haciendo que el procesamiento y análisis de esta estructura requiera tecnologías avanzadas y modelos distribuidos,\n",
        "    como Apache Giraph o Pregel, para manejar el volumen de datos.</p>\n",
        "\n",
        "    <h2 class=\"section-title\">1.2 Escalabilidad y complejidad de grafos en entornos masivos</h2>\n",
        "    <p>El procesamiento de grafos a gran escala presenta desafíos únicos en términos de <strong>escalabilidad</strong> y <strong>complejidad</strong>.\n",
        "    A medida que el número de nodos y aristas crece, los requisitos de memoria y de procesamiento aumentan de forma exponencial.\n",
        "    En este sentido, los grafos grandes requieren no solo más espacio para almacenar las relaciones, sino también mayor capacidad de procesamiento para analizarlas de forma efectiva.</p>\n",
        "\n",
        "    <p>Un aspecto clave en el manejo de grafos a gran escala es la <strong>paralelización del procesamiento</strong>, ya que la complejidad de analizar y explorar conexiones en redes tan densas supera las capacidades de un solo servidor.\n",
        "    La escalabilidad implica la capacidad de distribuir el procesamiento a través de múltiples nodos en una red distribuida,\n",
        "    lo cual es esencial para manejar datos en el orden de petabytes, típicos de aplicaciones Big Data.</p>\n",
        "\n",
        "    <p>La <strong>complejidad computacional</strong> también es un desafío en el análisis de grafos de gran escala.\n",
        "    Los algoritmos comunes de grafos, como la búsqueda de caminos mínimos o la identificación de clústeres,\n",
        "    requieren numerosas operaciones sobre la estructura, lo que implica múltiples iteraciones y puede ser costoso en tiempo y recursos.\n",
        "    Por esta razón, los algoritmos necesitan ser diseñados o adaptados para que se ejecuten en entornos distribuidos y aprovechen al máximo la capacidad de procesamiento paralelo.</p>\n",
        "\n",
        "    <h2 class=\"section-title\">1.3 Aplicaciones comunes en redes sociales, logística y transporte</h2>\n",
        "    <p>Los grafos en Big Data son aplicables en una variedad de sectores. A continuación, se exploran algunas de las aplicaciones más comunes:</p>\n",
        "\n",
        "    <div class=\"application\">\n",
        "        <h3>Redes sociales</h3>\n",
        "        <p>Las redes sociales son un caso clásico de aplicación de grafos. En este contexto, los usuarios son los nodos y las conexiones de amistad o interacción representan las aristas.\n",
        "        Con grafos, es posible analizar la <strong>influencia</strong> de ciertos nodos, identificar comunidades o grupos, y detectar patrones de interacción.\n",
        "        Los análisis de grafos en redes sociales también ayudan a mejorar los sistemas de recomendación y publicidad, identificando las conexiones más relevantes para sugerir contenido.</p>\n",
        "    </div>\n",
        "\n",
        "    <div class=\"application\">\n",
        "        <h3>Logística y distribución</h3>\n",
        "        <p>En el sector logístico, los grafos modelan sistemas de rutas y redes de transporte, optimizando la <strong>planificación de rutas</strong> y la <strong>gestión de inventario</strong>.\n",
        "        Los nodos representan almacenes o puntos de entrega, y las aristas, los caminos entre ellos.\n",
        "        Mediante algoritmos como el de Dijkstra, es posible calcular las rutas de menor costo, optimizando el tiempo y reduciendo los gastos de transporte.\n",
        "        En redes complejas de distribución, estos grafos ayudan a minimizar los tiempos de entrega y optimizar el flujo de mercancías.</p>\n",
        "    </div>\n",
        "\n",
        "    <div class=\"application\">\n",
        "        <h3>Sistemas de transporte urbano</h3>\n",
        "        <p>Los grafos también se utilizan en la planificación y optimización de sistemas de transporte público.\n",
        "        En este caso, las estaciones son los nodos y las rutas entre ellas las aristas.\n",
        "        Los algoritmos de búsqueda en grafos permiten identificar las rutas óptimas para los usuarios, considerando variables como la congestión y el tiempo de espera.\n",
        "        Esto facilita una gestión más eficiente de los recursos de transporte y ayuda a los operadores a mejorar el servicio, garantizando rutas eficientes y tiempos de espera mínimos para los pasajeros.</p>\n",
        "    </div>\n",
        "\n",
        "    <p>Cada una de estas aplicaciones se beneficia enormemente de las tecnologías de Big Data, ya que permiten realizar análisis complejos y en tiempo real en grafos que de otro modo serían imposibles de gestionar.\n",
        "    Con herramientas como Pregel y Apache Giraph, es posible implementar estos sistemas a gran escala, asegurando que el análisis de grafos sea rápido y efectivo en entornos de Big Data.</p>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "bTIRYftt6rJS",
        "outputId": "76d30dd5-86fa-40de-df9e-f6613291b1f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Introducción a los Grafos en Big Data</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 2em;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        h3 {\n",
              "            color: #0056b3;\n",
              "            font-size: 1.6em;\n",
              "            margin-top: 25px;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            margin-left: 20px;\n",
              "            font-size: 1.1em;\n",
              "            list-style-type: disc;\n",
              "        }\n",
              "        li {\n",
              "            margin-bottom: 10px;\n",
              "        }\n",
              "        .application {\n",
              "            margin-top: 20px;\n",
              "            padding: 15px;\n",
              "            background-color: #eaf2fd;\n",
              "            border-left: 5px solid #0056b3;\n",
              "        }\n",
              "        .section-title {\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            font-weight: bold;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "    <h1>Introducción a los Grafos en Big Data</h1>\n",
              "    \n",
              "    <h2 class=\"section-title\">1.1 Definición de grafos en el contexto de Big Data</h2>\n",
              "    <p>En el ámbito de Big Data, un <strong>grafo</strong> es una estructura matemática que representa un conjunto de elementos \n",
              "    (denominados <strong>nodos</strong> o <strong>vértices</strong>) y sus relaciones (llamadas <strong>aristas</strong> o <strong>enlaces</strong>). \n",
              "    Los grafos son herramientas fundamentales para modelar relaciones complejas entre entidades y son especialmente útiles en grandes volúmenes de datos debido a su capacidad para estructurar y conectar información diversa.</p>\n",
              "    \n",
              "    <p>En términos prácticos, los grafos permiten representar cualquier sistema en el que existan relaciones directas o indirectas entre entidades. \n",
              "    Por ejemplo:</p>\n",
              "    <ul>\n",
              "        <li><strong>Red social:</strong> los nodos representan personas y las aristas representan las conexiones de amistad.</li>\n",
              "        <li><strong>Sistema de transporte:</strong> los nodos representan estaciones o paradas, y las aristas, las rutas directas entre ellas.</li>\n",
              "        <li><strong>Sistema de recomendación:</strong> los nodos pueden ser productos y usuarios, y las aristas representan las preferencias o interacciones.</li>\n",
              "    </ul>\n",
              "    \n",
              "    <p>Dentro del contexto de Big Data, los grafos suelen ser de gran tamaño y contener relaciones densas y complejas, \n",
              "    por lo cual su análisis eficiente es crucial. Los grafos de gran escala pueden almacenar millones de nodos y billones de aristas, \n",
              "    haciendo que el procesamiento y análisis de esta estructura requiera tecnologías avanzadas y modelos distribuidos, \n",
              "    como Apache Giraph o Pregel, para manejar el volumen de datos.</p>\n",
              "    \n",
              "    <h2 class=\"section-title\">1.2 Escalabilidad y complejidad de grafos en entornos masivos</h2>\n",
              "    <p>El procesamiento de grafos a gran escala presenta desafíos únicos en términos de <strong>escalabilidad</strong> y <strong>complejidad</strong>. \n",
              "    A medida que el número de nodos y aristas crece, los requisitos de memoria y de procesamiento aumentan de forma exponencial. \n",
              "    En este sentido, los grafos grandes requieren no solo más espacio para almacenar las relaciones, sino también mayor capacidad de procesamiento para analizarlas de forma efectiva.</p>\n",
              "    \n",
              "    <p>Un aspecto clave en el manejo de grafos a gran escala es la <strong>paralelización del procesamiento</strong>, ya que la complejidad de analizar y explorar conexiones en redes tan densas supera las capacidades de un solo servidor. \n",
              "    La escalabilidad implica la capacidad de distribuir el procesamiento a través de múltiples nodos en una red distribuida, \n",
              "    lo cual es esencial para manejar datos en el orden de petabytes, típicos de aplicaciones Big Data.</p>\n",
              "    \n",
              "    <p>La <strong>complejidad computacional</strong> también es un desafío en el análisis de grafos de gran escala. \n",
              "    Los algoritmos comunes de grafos, como la búsqueda de caminos mínimos o la identificación de clústeres, \n",
              "    requieren numerosas operaciones sobre la estructura, lo que implica múltiples iteraciones y puede ser costoso en tiempo y recursos. \n",
              "    Por esta razón, los algoritmos necesitan ser diseñados o adaptados para que se ejecuten en entornos distribuidos y aprovechen al máximo la capacidad de procesamiento paralelo.</p>\n",
              "    \n",
              "    <h2 class=\"section-title\">1.3 Aplicaciones comunes en redes sociales, logística y transporte</h2>\n",
              "    <p>Los grafos en Big Data son aplicables en una variedad de sectores. A continuación, se exploran algunas de las aplicaciones más comunes:</p>\n",
              "    \n",
              "    <div class=\"application\">\n",
              "        <h3>Redes sociales</h3>\n",
              "        <p>Las redes sociales son un caso clásico de aplicación de grafos. En este contexto, los usuarios son los nodos y las conexiones de amistad o interacción representan las aristas. \n",
              "        Con grafos, es posible analizar la <strong>influencia</strong> de ciertos nodos, identificar comunidades o grupos, y detectar patrones de interacción. \n",
              "        Los análisis de grafos en redes sociales también ayudan a mejorar los sistemas de recomendación y publicidad, identificando las conexiones más relevantes para sugerir contenido.</p>\n",
              "    </div>\n",
              "    \n",
              "    <div class=\"application\">\n",
              "        <h3>Logística y distribución</h3>\n",
              "        <p>En el sector logístico, los grafos modelan sistemas de rutas y redes de transporte, optimizando la <strong>planificación de rutas</strong> y la <strong>gestión de inventario</strong>. \n",
              "        Los nodos representan almacenes o puntos de entrega, y las aristas, los caminos entre ellos. \n",
              "        Mediante algoritmos como el de Dijkstra, es posible calcular las rutas de menor costo, optimizando el tiempo y reduciendo los gastos de transporte. \n",
              "        En redes complejas de distribución, estos grafos ayudan a minimizar los tiempos de entrega y optimizar el flujo de mercancías.</p>\n",
              "    </div>\n",
              "    \n",
              "    <div class=\"application\">\n",
              "        <h3>Sistemas de transporte urbano</h3>\n",
              "        <p>Los grafos también se utilizan en la planificación y optimización de sistemas de transporte público. \n",
              "        En este caso, las estaciones son los nodos y las rutas entre ellas las aristas. \n",
              "        Los algoritmos de búsqueda en grafos permiten identificar las rutas óptimas para los usuarios, considerando variables como la congestión y el tiempo de espera. \n",
              "        Esto facilita una gestión más eficiente de los recursos de transporte y ayuda a los operadores a mejorar el servicio, garantizando rutas eficientes y tiempos de espera mínimos para los pasajeros.</p>\n",
              "    </div>\n",
              "\n",
              "    <p>Cada una de estas aplicaciones se beneficia enormemente de las tecnologías de Big Data, ya que permiten realizar análisis complejos y en tiempo real en grafos que de otro modo serían imposibles de gestionar. \n",
              "    Con herramientas como Pregel y Apache Giraph, es posible implementar estos sistemas a gran escala, asegurando que el análisis de grafos sea rápido y efectivo en entornos de Big Data.</p>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>El Algoritmo de Dijkstra</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 2em;\n",
        "            margin-top: 30px;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "        }\n",
        "        h3 {\n",
        "            color: #0056b3;\n",
        "            font-size: 1.6em;\n",
        "            margin-top: 25px;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            margin-left: 20px;\n",
        "            font-size: 1.1em;\n",
        "            list-style-type: disc;\n",
        "        }\n",
        "        li {\n",
        "            margin-bottom: 10px;\n",
        "        }\n",
        "        .application {\n",
        "            margin-top: 20px;\n",
        "            padding: 15px;\n",
        "            background-color: #eaf2fd;\n",
        "            border-left: 5px solid #0056b3;\n",
        "        }\n",
        "        .section-title {\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            font-weight: bold;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>El Algoritmo de Dijkstra</h1>\n",
        "\n",
        "    <h2 class=\"section-title\">2.1 Fundamentos y funcionamiento del algoritmo de Dijkstra</h2>\n",
        "    <p>El <strong>algoritmo de Dijkstra</strong> es un método clásico para encontrar el camino de menor costo o menor distancia entre un nodo de origen y otros nodos dentro de un grafo ponderado, donde cada arista tiene un \"costo\" o peso. Fue desarrollado por el científico Edsger Dijkstra en 1956 y es ampliamente usado en problemas de optimización de rutas y redes.</p>\n",
        "\n",
        "    <p>El funcionamiento del algoritmo sigue estos pasos básicos:</p>\n",
        "    <ul>\n",
        "        <li><strong>Inicialización</strong>: Se asigna al nodo de origen un costo acumulado de cero y a todos los demás nodos un valor infinito, indicando que aún no se han alcanzado. Los nodos no explorados se marcan como “pendientes”.</li>\n",
        "        <li><strong>Expansión</strong>: El algoritmo selecciona el nodo con el menor costo acumulado que aún no ha sido procesado. Se analizan las aristas que conectan este nodo con sus vecinos, actualizando el costo acumulado de estos vecinos si se encuentra un camino de menor costo.</li>\n",
        "        <li><strong>Actualización y repetición</strong>: Después de procesar el nodo, se marca como “explorado” y se repite el proceso con el siguiente nodo de menor costo en la lista de pendientes.</li>\n",
        "        <li><strong>Finalización</strong>: El proceso se detiene cuando todos los nodos alcanzables han sido explorados o cuando se encuentra el camino mínimo hacia un nodo específico.</li>\n",
        "    </ul>\n",
        "\n",
        "    <p>Al final, el algoritmo de Dijkstra proporciona la ruta óptima entre el nodo de origen y todos los demás nodos alcanzables en términos de costo acumulado, optimizando así la búsqueda de caminos en grafos de tamaño pequeño o mediano.</p>\n",
        "\n",
        "    <h2 class=\"section-title\">2.2 Uso de estructuras de datos como colas de prioridad</h2>\n",
        "    <p>Una parte fundamental para la eficiencia del algoritmo de Dijkstra es el uso de una <strong>cola de prioridad</strong> (o heap). Esta estructura permite almacenar y gestionar los nodos pendientes de explorar, priorizando siempre el nodo con el costo acumulado más bajo. La cola de prioridad facilita las siguientes operaciones críticas para el algoritmo:</p>\n",
        "\n",
        "    <ul>\n",
        "        <li><strong>Extracción del nodo con menor costo</strong>: En cada paso del algoritmo, se selecciona el nodo con el menor costo acumulado para ser expandido. Una cola de prioridad permite realizar esta operación en tiempo logarítmico, lo cual es significativamente más rápido que en una lista sin ordenar.</li>\n",
        "        <li><strong>Actualización del costo de un nodo</strong>: Cuando se encuentra un camino de menor costo hacia un nodo vecino, se actualiza su valor en la cola de prioridad. En una implementación óptima, la cola permite realizar estas actualizaciones de manera eficiente, optimizando el rendimiento del algoritmo.</li>\n",
        "    </ul>\n",
        "\n",
        "    <p>Las colas de prioridad suelen implementarse mediante <strong>heaps binarios</strong> o estructuras similares, que permiten realizar inserciones y extracciones de mínimos en tiempo logarítmico. En casos de gran escala, se puede usar un <strong>Fibonacci heap</strong>, que ofrece aún mejores tiempos de operación en teoría, pero puede ser más costoso en la práctica debido a la complejidad de su implementación.</p>\n",
        "\n",
        "    <p>La elección de la estructura de datos adecuada es clave para que el algoritmo de Dijkstra mantenga su eficiencia, especialmente cuando se aplica a grafos densos o de tamaño considerable. Gracias a estas estructuras, el algoritmo se mantiene competitivo en términos de tiempo de ejecución y uso de recursos, aunque su rendimiento se ve limitado en entornos de Big Data, como se detalla a continuación.</p>\n",
        "\n",
        "    <h2 class=\"section-title\">2.3 Limitaciones del algoritmo en entornos de Big Data</h2>\n",
        "    <p>Si bien el algoritmo de Dijkstra es eficaz en grafos pequeños o moderados, presenta ciertas <strong>limitaciones cuando se aplica a grafos de gran escala</strong>, como los que se encuentran en el contexto de Big Data. Estas limitaciones incluyen:</p>\n",
        "\n",
        "    <ul>\n",
        "        <li><strong>Escalabilidad limitada</strong>: El algoritmo de Dijkstra fue diseñado originalmente para ser ejecutado en una sola máquina, lo cual limita su aplicación en grafos con millones o miles de millones de nodos y aristas. En Big Data, donde el volumen de datos es masivo, el algoritmo necesita ser adaptado para ejecutarse en sistemas distribuidos y paralelos.</li>\n",
        "        <li><strong>Naturaleza secuencial del algoritmo</strong>: Dijkstra es inherentemente secuencial en su estructura, lo que dificulta su aplicación en entornos distribuidos. Su dependencia en seleccionar y expandir el nodo con menor costo en cada paso hace que no se pueda dividir en tareas completamente independientes sin alterar su funcionamiento. Este enfoque secuencial limita su escalabilidad y hace que el tiempo de procesamiento crezca significativamente en grafos de gran tamaño.</li>\n",
        "        <li><strong>Requerimientos de memoria y procesamiento</strong>: A medida que el grafo aumenta en tamaño, también lo hacen las demandas de memoria y procesamiento. Los grafos de gran escala, comunes en Big Data, requieren almacenar millones de nodos y sus relaciones, lo que supera las capacidades de memoria de una máquina tradicional y demanda un enfoque distribuido para gestionarlos eficientemente.</li>\n",
        "        <li><strong>Adaptación a procesamiento paralelo</strong>: Para aplicar Dijkstra en Big Data, se requiere adaptarlo a modelos de procesamiento distribuido. Este desafío ha impulsado el desarrollo de algoritmos similares (como el de búsqueda de caminos en Pregel o Apache Giraph) que permiten dividir el grafo en partes más pequeñas que se procesan en paralelo, alcanzando así una mayor eficiencia.</li>\n",
        "    </ul>\n",
        "\n",
        "    <p>Estas limitaciones han llevado a la creación de alternativas y modificaciones del algoritmo original, así como al uso de herramientas como <strong>Apache Giraph y Pregel</strong> que permiten manejar grafos a gran escala. Estas plataformas distribuyen el procesamiento y logran adaptaciones de Dijkstra que son más eficaces en entornos de Big Data.</p>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "obPg_5B29s3E",
        "outputId": "c932b711-2aef-4a68-f36a-eae7bfb71cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>El Algoritmo de Dijkstra</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 2em;\n",
              "            margin-top: 30px;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "        }\n",
              "        h3 {\n",
              "            color: #0056b3;\n",
              "            font-size: 1.6em;\n",
              "            margin-top: 25px;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            margin-left: 20px;\n",
              "            font-size: 1.1em;\n",
              "            list-style-type: disc;\n",
              "        }\n",
              "        li {\n",
              "            margin-bottom: 10px;\n",
              "        }\n",
              "        .application {\n",
              "            margin-top: 20px;\n",
              "            padding: 15px;\n",
              "            background-color: #eaf2fd;\n",
              "            border-left: 5px solid #0056b3;\n",
              "        }\n",
              "        .section-title {\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            font-weight: bold;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>El Algoritmo de Dijkstra</h1>\n",
              "\n",
              "    <h2 class=\"section-title\">2.1 Fundamentos y funcionamiento del algoritmo de Dijkstra</h2>\n",
              "    <p>El <strong>algoritmo de Dijkstra</strong> es un método clásico para encontrar el camino de menor costo o menor distancia entre un nodo de origen y otros nodos dentro de un grafo ponderado, donde cada arista tiene un \"costo\" o peso. Fue desarrollado por el científico Edsger Dijkstra en 1956 y es ampliamente usado en problemas de optimización de rutas y redes.</p>\n",
              "\n",
              "    <p>El funcionamiento del algoritmo sigue estos pasos básicos:</p>\n",
              "    <ul>\n",
              "        <li><strong>Inicialización</strong>: Se asigna al nodo de origen un costo acumulado de cero y a todos los demás nodos un valor infinito, indicando que aún no se han alcanzado. Los nodos no explorados se marcan como “pendientes”.</li>\n",
              "        <li><strong>Expansión</strong>: El algoritmo selecciona el nodo con el menor costo acumulado que aún no ha sido procesado. Se analizan las aristas que conectan este nodo con sus vecinos, actualizando el costo acumulado de estos vecinos si se encuentra un camino de menor costo.</li>\n",
              "        <li><strong>Actualización y repetición</strong>: Después de procesar el nodo, se marca como “explorado” y se repite el proceso con el siguiente nodo de menor costo en la lista de pendientes.</li>\n",
              "        <li><strong>Finalización</strong>: El proceso se detiene cuando todos los nodos alcanzables han sido explorados o cuando se encuentra el camino mínimo hacia un nodo específico.</li>\n",
              "    </ul>\n",
              "\n",
              "    <p>Al final, el algoritmo de Dijkstra proporciona la ruta óptima entre el nodo de origen y todos los demás nodos alcanzables en términos de costo acumulado, optimizando así la búsqueda de caminos en grafos de tamaño pequeño o mediano.</p>\n",
              "\n",
              "    <h2 class=\"section-title\">2.2 Uso de estructuras de datos como colas de prioridad</h2>\n",
              "    <p>Una parte fundamental para la eficiencia del algoritmo de Dijkstra es el uso de una <strong>cola de prioridad</strong> (o heap). Esta estructura permite almacenar y gestionar los nodos pendientes de explorar, priorizando siempre el nodo con el costo acumulado más bajo. La cola de prioridad facilita las siguientes operaciones críticas para el algoritmo:</p>\n",
              "\n",
              "    <ul>\n",
              "        <li><strong>Extracción del nodo con menor costo</strong>: En cada paso del algoritmo, se selecciona el nodo con el menor costo acumulado para ser expandido. Una cola de prioridad permite realizar esta operación en tiempo logarítmico, lo cual es significativamente más rápido que en una lista sin ordenar.</li>\n",
              "        <li><strong>Actualización del costo de un nodo</strong>: Cuando se encuentra un camino de menor costo hacia un nodo vecino, se actualiza su valor en la cola de prioridad. En una implementación óptima, la cola permite realizar estas actualizaciones de manera eficiente, optimizando el rendimiento del algoritmo.</li>\n",
              "    </ul>\n",
              "\n",
              "    <p>Las colas de prioridad suelen implementarse mediante <strong>heaps binarios</strong> o estructuras similares, que permiten realizar inserciones y extracciones de mínimos en tiempo logarítmico. En casos de gran escala, se puede usar un <strong>Fibonacci heap</strong>, que ofrece aún mejores tiempos de operación en teoría, pero puede ser más costoso en la práctica debido a la complejidad de su implementación.</p>\n",
              "\n",
              "    <p>La elección de la estructura de datos adecuada es clave para que el algoritmo de Dijkstra mantenga su eficiencia, especialmente cuando se aplica a grafos densos o de tamaño considerable. Gracias a estas estructuras, el algoritmo se mantiene competitivo en términos de tiempo de ejecución y uso de recursos, aunque su rendimiento se ve limitado en entornos de Big Data, como se detalla a continuación.</p>\n",
              "\n",
              "    <h2 class=\"section-title\">2.3 Limitaciones del algoritmo en entornos de Big Data</h2>\n",
              "    <p>Si bien el algoritmo de Dijkstra es eficaz en grafos pequeños o moderados, presenta ciertas <strong>limitaciones cuando se aplica a grafos de gran escala</strong>, como los que se encuentran en el contexto de Big Data. Estas limitaciones incluyen:</p>\n",
              "\n",
              "    <ul>\n",
              "        <li><strong>Escalabilidad limitada</strong>: El algoritmo de Dijkstra fue diseñado originalmente para ser ejecutado en una sola máquina, lo cual limita su aplicación en grafos con millones o miles de millones de nodos y aristas. En Big Data, donde el volumen de datos es masivo, el algoritmo necesita ser adaptado para ejecutarse en sistemas distribuidos y paralelos.</li>\n",
              "        <li><strong>Naturaleza secuencial del algoritmo</strong>: Dijkstra es inherentemente secuencial en su estructura, lo que dificulta su aplicación en entornos distribuidos. Su dependencia en seleccionar y expandir el nodo con menor costo en cada paso hace que no se pueda dividir en tareas completamente independientes sin alterar su funcionamiento. Este enfoque secuencial limita su escalabilidad y hace que el tiempo de procesamiento crezca significativamente en grafos de gran tamaño.</li>\n",
              "        <li><strong>Requerimientos de memoria y procesamiento</strong>: A medida que el grafo aumenta en tamaño, también lo hacen las demandas de memoria y procesamiento. Los grafos de gran escala, comunes en Big Data, requieren almacenar millones de nodos y sus relaciones, lo que supera las capacidades de memoria de una máquina tradicional y demanda un enfoque distribuido para gestionarlos eficientemente.</li>\n",
              "        <li><strong>Adaptación a procesamiento paralelo</strong>: Para aplicar Dijkstra en Big Data, se requiere adaptarlo a modelos de procesamiento distribuido. Este desafío ha impulsado el desarrollo de algoritmos similares (como el de búsqueda de caminos en Pregel o Apache Giraph) que permiten dividir el grafo en partes más pequeñas que se procesan en paralelo, alcanzando así una mayor eficiencia.</li>\n",
              "    </ul>\n",
              "\n",
              "    <p>Estas limitaciones han llevado a la creación de alternativas y modificaciones del algoritmo original, así como al uso de herramientas como <strong>Apache Giraph y Pregel</strong> que permiten manejar grafos a gran escala. Estas plataformas distribuyen el procesamiento y logran adaptaciones de Dijkstra que son más eficaces en entornos de Big Data.</p>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML estilizado\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Desafíos del Algoritmo de Dijkstra en Big Data</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 2em;\n",
        "            margin-top: 30px;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "        }\n",
        "        h3 {\n",
        "            color: #0056b3;\n",
        "            font-size: 1.6em;\n",
        "            margin-top: 25px;\n",
        "        }\n",
        "        p {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            margin-left: 20px;\n",
        "            font-size: 1.1em;\n",
        "            list-style-type: disc;\n",
        "        }\n",
        "        li {\n",
        "            margin-bottom: 10px;\n",
        "        }\n",
        "        .highlight {\n",
        "            margin-top: 20px;\n",
        "            padding: 15px;\n",
        "            background-color: #eaf2fd;\n",
        "            border-left: 5px solid #0056b3;\n",
        "        }\n",
        "        .section-title {\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            font-weight: bold;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Desafíos del Algoritmo de Dijkstra en Big Data</h1>\n",
        "\n",
        "    <h2 class=\"section-title\">3.1 Escalabilidad y procesamiento en grafos con millones de nodos</h2>\n",
        "    <p>Uno de los mayores desafíos de aplicar el algoritmo de Dijkstra en contextos de Big Data es la <strong>escalabilidad</strong>.\n",
        "    Los grafos en Big Data suelen ser extremadamente grandes, con millones o incluso miles de millones de nodos y aristas. Esta magnitud presenta problemas únicos:</p>\n",
        "\n",
        "    <ul>\n",
        "        <li><strong>Crecimiento exponencial de la complejidad</strong>: A medida que el número de nodos y conexiones aumenta, los requerimientos de memoria y procesamiento se incrementan exponencialmente. El almacenamiento de todos los nodos y sus relaciones en la memoria de una sola máquina resulta inviable cuando se trabaja con grafos de esta magnitud.</li>\n",
        "        <li><strong>Demanda de recursos</strong>: Para procesar grafos grandes, el algoritmo de Dijkstra requeriría un uso intensivo de memoria y potencia de cálculo. Cada paso de cálculo de rutas y actualización de costos entre nodos implica múltiples accesos y manipulaciones de datos. Para grafos masivos, esto provoca un cuello de botella en el rendimiento.</li>\n",
        "        <li><strong>Enfoque distribuido como solución</strong>: La única manera de manejar estos volúmenes de datos en Big Data es distribuir el procesamiento entre múltiples máquinas. De este modo, la carga de cálculo y almacenamiento se reparte, lo que permite gestionar millones de nodos y aristas. Herramientas como Apache Giraph y Pregel están diseñadas precisamente para facilitar este tipo de procesamiento distribuido en grafos grandes.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2 class=\"section-title\">3.2 Necesidad de adaptación para el procesamiento paralelo</h2>\n",
        "    <p>El algoritmo de Dijkstra, en su diseño original, sigue una estructura secuencial, donde el nodo de menor costo se selecciona, expande y explora en cada iteración. Esto es eficiente en grafos pequeños, pero en Big Data, la estructura secuencial se convierte en un obstáculo:</p>\n",
        "\n",
        "    <ul>\n",
        "        <li><strong>Limitaciones de la secuencialidad</strong>: La naturaleza secuencial de Dijkstra hace que el algoritmo no sea ideal para la ejecución en sistemas distribuidos y paralelos, que son la norma en Big Data. La necesidad de seguir un orden específico de exploración significa que el algoritmo tradicional de Dijkstra no puede aprovechar al máximo las ventajas de un sistema paralelo.</li>\n",
        "        <li><strong>Adaptación al procesamiento paralelo</strong>: Para hacer viable el uso de Dijkstra en entornos de Big Data, es necesario modificarlo para que funcione de forma paralela. Esto implica dividir el grafo en subgrafos que se puedan procesar en paralelo, asignando partes del grafo a diferentes nodos de procesamiento. Herramientas como Pregel y Apache Giraph facilitan esta división, aplicando el procesamiento \"vertex-centric\" (centrado en el vértice), donde cada nodo realiza cálculos independientes basados en su propio estado y el de sus vecinos.</li>\n",
        "        <li><strong>Desafíos de sincronización</strong>: Incluso en un entorno paralelo, el algoritmo debe coordinar los resultados de cada subgrafo y resolver los conflictos de rutas compartidas. Esto añade complejidad en la implementación del algoritmo en plataformas distribuidas y requiere técnicas de sincronización y comunicación entre nodos de procesamiento para asegurar la integridad de los resultados.</li>\n",
        "    </ul>\n",
        "\n",
        "    <h2 class=\"section-title\">3.3 Importancia de la eficiencia en la optimización de rutas y redes</h2>\n",
        "    <p>La <strong>eficiencia</strong> es crítica en aplicaciones de Big Data que requieren cálculos en tiempo real, como las optimizaciones de rutas en redes logísticas, transporte urbano y redes sociales:</p>\n",
        "\n",
        "    <ul>\n",
        "        <li><strong>Demanda de respuestas en tiempo real</strong>: En aplicaciones como el seguimiento logístico o las recomendaciones en redes sociales, los usuarios y sistemas esperan obtener rutas y sugerencias al instante. La capacidad de optimizar rutas en tiempo real es esencial para cumplir con las expectativas de rendimiento en estos sistemas.</li>\n",
        "        <li><strong>Impacto en la experiencia del usuario y el rendimiento del sistema</strong>: Una ruta optimizada o una recomendación precisa puede influir directamente en la satisfacción del usuario o en la eficiencia operativa de una empresa. Por ejemplo, en sistemas de logística, rutas optimizadas pueden reducir tiempos de entrega y costos de combustible; en redes sociales, conexiones relevantes pueden mejorar la interacción y el engagement del usuario.</li>\n",
        "        <li><strong>Reducción de costos y maximización de recursos</strong>: Optimizar rutas de manera eficiente no solo ahorra tiempo sino también reduce los costos asociados. En sistemas complejos y de gran escala, cada segundo cuenta, y cada optimización tiene un impacto económico tangible. La eficiencia en el algoritmo de Dijkstra adaptado para Big Data permite que las empresas utilicen menos recursos para obtener resultados precisos y en menor tiempo.</li>\n",
        "    </ul>\n",
        "\n",
        "    <p>Dado estos desafíos, se han desarrollado soluciones distribuidas y adaptaciones del algoritmo de Dijkstra que permiten un procesamiento eficiente en grafos de gran escala. Estas soluciones son clave en el aprovechamiento de los datos a gran escala y en la mejora de la eficiencia operativa en aplicaciones de Big Data.</p>\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "H2lQ1ReZBKw6",
        "outputId": "0438d2e6-709e-41fd-92d4-090fd819c497"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Desafíos del Algoritmo de Dijkstra en Big Data</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 2em;\n",
              "            margin-top: 30px;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "        }\n",
              "        h3 {\n",
              "            color: #0056b3;\n",
              "            font-size: 1.6em;\n",
              "            margin-top: 25px;\n",
              "        }\n",
              "        p {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            margin-left: 20px;\n",
              "            font-size: 1.1em;\n",
              "            list-style-type: disc;\n",
              "        }\n",
              "        li {\n",
              "            margin-bottom: 10px;\n",
              "        }\n",
              "        .highlight {\n",
              "            margin-top: 20px;\n",
              "            padding: 15px;\n",
              "            background-color: #eaf2fd;\n",
              "            border-left: 5px solid #0056b3;\n",
              "        }\n",
              "        .section-title {\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            font-weight: bold;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Desafíos del Algoritmo de Dijkstra en Big Data</h1>\n",
              "\n",
              "    <h2 class=\"section-title\">3.1 Escalabilidad y procesamiento en grafos con millones de nodos</h2>\n",
              "    <p>Uno de los mayores desafíos de aplicar el algoritmo de Dijkstra en contextos de Big Data es la <strong>escalabilidad</strong>. \n",
              "    Los grafos en Big Data suelen ser extremadamente grandes, con millones o incluso miles de millones de nodos y aristas. Esta magnitud presenta problemas únicos:</p>\n",
              "\n",
              "    <ul>\n",
              "        <li><strong>Crecimiento exponencial de la complejidad</strong>: A medida que el número de nodos y conexiones aumenta, los requerimientos de memoria y procesamiento se incrementan exponencialmente. El almacenamiento de todos los nodos y sus relaciones en la memoria de una sola máquina resulta inviable cuando se trabaja con grafos de esta magnitud.</li>\n",
              "        <li><strong>Demanda de recursos</strong>: Para procesar grafos grandes, el algoritmo de Dijkstra requeriría un uso intensivo de memoria y potencia de cálculo. Cada paso de cálculo de rutas y actualización de costos entre nodos implica múltiples accesos y manipulaciones de datos. Para grafos masivos, esto provoca un cuello de botella en el rendimiento.</li>\n",
              "        <li><strong>Enfoque distribuido como solución</strong>: La única manera de manejar estos volúmenes de datos en Big Data es distribuir el procesamiento entre múltiples máquinas. De este modo, la carga de cálculo y almacenamiento se reparte, lo que permite gestionar millones de nodos y aristas. Herramientas como Apache Giraph y Pregel están diseñadas precisamente para facilitar este tipo de procesamiento distribuido en grafos grandes.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2 class=\"section-title\">3.2 Necesidad de adaptación para el procesamiento paralelo</h2>\n",
              "    <p>El algoritmo de Dijkstra, en su diseño original, sigue una estructura secuencial, donde el nodo de menor costo se selecciona, expande y explora en cada iteración. Esto es eficiente en grafos pequeños, pero en Big Data, la estructura secuencial se convierte en un obstáculo:</p>\n",
              "\n",
              "    <ul>\n",
              "        <li><strong>Limitaciones de la secuencialidad</strong>: La naturaleza secuencial de Dijkstra hace que el algoritmo no sea ideal para la ejecución en sistemas distribuidos y paralelos, que son la norma en Big Data. La necesidad de seguir un orden específico de exploración significa que el algoritmo tradicional de Dijkstra no puede aprovechar al máximo las ventajas de un sistema paralelo.</li>\n",
              "        <li><strong>Adaptación al procesamiento paralelo</strong>: Para hacer viable el uso de Dijkstra en entornos de Big Data, es necesario modificarlo para que funcione de forma paralela. Esto implica dividir el grafo en subgrafos que se puedan procesar en paralelo, asignando partes del grafo a diferentes nodos de procesamiento. Herramientas como Pregel y Apache Giraph facilitan esta división, aplicando el procesamiento \"vertex-centric\" (centrado en el vértice), donde cada nodo realiza cálculos independientes basados en su propio estado y el de sus vecinos.</li>\n",
              "        <li><strong>Desafíos de sincronización</strong>: Incluso en un entorno paralelo, el algoritmo debe coordinar los resultados de cada subgrafo y resolver los conflictos de rutas compartidas. Esto añade complejidad en la implementación del algoritmo en plataformas distribuidas y requiere técnicas de sincronización y comunicación entre nodos de procesamiento para asegurar la integridad de los resultados.</li>\n",
              "    </ul>\n",
              "\n",
              "    <h2 class=\"section-title\">3.3 Importancia de la eficiencia en la optimización de rutas y redes</h2>\n",
              "    <p>La <strong>eficiencia</strong> es crítica en aplicaciones de Big Data que requieren cálculos en tiempo real, como las optimizaciones de rutas en redes logísticas, transporte urbano y redes sociales:</p>\n",
              "\n",
              "    <ul>\n",
              "        <li><strong>Demanda de respuestas en tiempo real</strong>: En aplicaciones como el seguimiento logístico o las recomendaciones en redes sociales, los usuarios y sistemas esperan obtener rutas y sugerencias al instante. La capacidad de optimizar rutas en tiempo real es esencial para cumplir con las expectativas de rendimiento en estos sistemas.</li>\n",
              "        <li><strong>Impacto en la experiencia del usuario y el rendimiento del sistema</strong>: Una ruta optimizada o una recomendación precisa puede influir directamente en la satisfacción del usuario o en la eficiencia operativa de una empresa. Por ejemplo, en sistemas de logística, rutas optimizadas pueden reducir tiempos de entrega y costos de combustible; en redes sociales, conexiones relevantes pueden mejorar la interacción y el engagement del usuario.</li>\n",
              "        <li><strong>Reducción de costos y maximización de recursos</strong>: Optimizar rutas de manera eficiente no solo ahorra tiempo sino también reduce los costos asociados. En sistemas complejos y de gran escala, cada segundo cuenta, y cada optimización tiene un impacto económico tangible. La eficiencia en el algoritmo de Dijkstra adaptado para Big Data permite que las empresas utilicen menos recursos para obtener resultados precisos y en menor tiempo.</li>\n",
              "    </ul>\n",
              "\n",
              "    <p>Dado estos desafíos, se han desarrollado soluciones distribuidas y adaptaciones del algoritmo de Dijkstra que permiten un procesamiento eficiente en grafos de gran escala. Estas soluciones son clave en el aprovechamiento de los datos a gran escala y en la mejora de la eficiencia operativa en aplicaciones de Big Data.</p>\n",
              "\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML con secciones colapsables y barra de navegación\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Introducción a Pregel en el Procesamiento de Grafos Distribuidos</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2, h3 {\n",
        "            color: #333;\n",
        "            font-size: 1.6em;\n",
        "            cursor: pointer;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p, ul, li {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .navbar {\n",
        "            text-align: center;\n",
        "            margin: 20px 0;\n",
        "        }\n",
        "        .navbar a {\n",
        "            color: #0056b3;\n",
        "            margin: 0 15px;\n",
        "            font-size: 1.1em;\n",
        "            text-decoration: none;\n",
        "        }\n",
        "        .navbar a:hover {\n",
        "            text-decoration: underline;\n",
        "        }\n",
        "        .content {\n",
        "            display: none;\n",
        "            margin-top: 10px;\n",
        "            padding-left: 10px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <!-- Barra de Navegación Interna -->\n",
        "    <div class=\"navbar\">\n",
        "        <a href=\"#origen\">4.1 Origen y propósito</a> |\n",
        "        <a href=\"#modelo\">4.2 Modelo vertex-centric</a> |\n",
        "        <a href=\"#superpasos\">4.3 Superpasos</a>\n",
        "    </div>\n",
        "\n",
        "    <h1>Introducción a Pregel en el Procesamiento de Grafos Distribuidos</h1>\n",
        "\n",
        "    <h2 id=\"origen\">4.1 Origen y propósito de Pregel en el procesamiento de grafos distribuidos</h2>\n",
        "    <div class=\"content\">\n",
        "        <p><strong>Pregel</strong> fue desarrollado por Google como una solución innovadora para procesar grafos distribuidos a gran escala, diseñado específicamente para abordar los desafíos de escalabilidad y eficiencia en la manipulación de grafos con millones o incluso miles de millones de nodos. El propósito de Pregel es permitir el procesamiento eficiente y paralelo de algoritmos complejos sobre grafos, como los algoritmos de búsqueda de caminos mínimos, detección de comunidades y análisis de influencia en redes sociales, entre otros.</p>\n",
        "\n",
        "        <p>La creación de Pregel fue impulsada por la necesidad de gestionar el volumen y la complejidad de datos en los sistemas de Google, donde las relaciones de los datos son tan masivas y densas que los métodos tradicionales de procesamiento se vuelven insuficientes. Los grafos a gran escala, como los de la web o las redes sociales, presentan relaciones densas que hacen que el procesamiento secuencial sea inviable debido a las limitaciones de tiempo y recursos. Pregel se diseñó para soportar un procesamiento altamente paralelo en una infraestructura distribuida, donde los cálculos se reparten entre múltiples nodos de procesamiento.</p>\n",
        "\n",
        "        <p>Al distribuir el procesamiento del grafo, Pregel logra realizar en entornos de gran escala lo que algoritmos como Dijkstra sólo pueden ofrecer en grafos más pequeños. Su arquitectura permite que cada parte del grafo se procese de manera independiente, manteniendo la eficiencia incluso en grafos de gran escala.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2 id=\"modelo\">4.2 Modelo de procesamiento \"vertex-centric\" o centrado en el vértice</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>Pregel implementa un modelo de procesamiento <strong>\"vertex-centric\"</strong> o centrado en el vértice, una metodología en la que cada nodo (o vértice) en el grafo realiza cálculos individuales basados en la información de sus vecinos. En este modelo, cada nodo actúa como una \"unidad\" autónoma que realiza operaciones basadas en los mensajes o datos que recibe de los nodos conectados a él. Este enfoque es fundamental para la escalabilidad en grafos grandes, ya que permite que el procesamiento se divida y paralelice de manera natural.</p>\n",
        "\n",
        "        <p>El modelo centrado en el vértice tiene varias ventajas:</p>\n",
        "        <ul>\n",
        "            <li><strong>Facilita el procesamiento paralelo</strong>: Cada nodo trabaja de manera independiente, procesando la información de sus vecinos y enviando los resultados a otros nodos, lo que permite que múltiples nodos trabajen al mismo tiempo sin interferencias.</li>\n",
        "            <li><strong>Optimización en entornos distribuidos</strong>: La independencia de cada nodo minimiza la necesidad de sincronización compleja y facilita la distribución del grafo entre múltiples servidores o nodos de procesamiento, haciendo que Pregel pueda escalar de manera eficiente en grandes infraestructuras.</li>\n",
        "            <li><strong>Flexibilidad para diversos algoritmos</strong>: La arquitectura de Pregel se adapta bien a una variedad de algoritmos de grafos, como el cálculo de caminos mínimos, la detección de comunidades y la identificación de patrones en redes sociales, lo que permite aplicarlo en distintas industrias y casos de uso.</li>\n",
        "        </ul>\n",
        "\n",
        "        <p>El enfoque centrado en el vértice de Pregel es una de las claves para su rendimiento en entornos de gran escala, ya que maximiza la paralelización y permite un procesamiento altamente eficiente en sistemas distribuidos.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2 id=\"superpasos\">4.3 Superpasos y procesamiento paralelo en grafos a gran escala</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>Pregel organiza el procesamiento de grafos en una serie de <strong>superpasos</strong>. En cada superpaso, los nodos (o vértices) del grafo ejecutan cálculos en paralelo y envían mensajes a sus nodos vecinos. Este enfoque permite mantener la sincronización y coordinación entre los nodos en cada etapa del cálculo, lo cual es esencial para garantizar la integridad del procesamiento en un sistema distribuido.</p>\n",
        "\n",
        "        <p>El proceso de superpasos se descompone en las siguientes fases:</p>\n",
        "        <ul>\n",
        "            <li><strong>Cálculo paralelo en cada nodo</strong>: Cada nodo procesa los datos que ha recibido de sus vecinos y actualiza su estado local. Luego, envía mensajes a sus vecinos con la información actualizada, si corresponde.</li>\n",
        "            <li><strong>Sincronización entre nodos al final del superpaso</strong>: Al concluir el superpaso, cada nodo espera hasta que todos hayan completado su procesamiento. Una vez que todos los nodos terminan, los mensajes enviados se entregan a los nodos correspondientes.</li>\n",
        "            <li><strong>Iteración de superpasos hasta la convergencia</strong>: El proceso continúa en múltiples superpasos hasta que el algoritmo \"converge\", cuando todos los nodos han alcanzado una solución estable.</li>\n",
        "        </ul>\n",
        "\n",
        "        <p>El enfoque de los superpasos permite que Pregel reduzca el tiempo necesario para calcular caminos mínimos y realizar otros cálculos en grafos de gran tamaño. La paralelización en cada superpaso hace posible que millones de nodos trabajen simultáneamente, disminuyendo significativamente los tiempos de procesamiento en comparación con algoritmos secuenciales.</p>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        document.querySelectorAll(\"h2\").forEach(header => {\n",
        "            header.addEventListener(\"click\", () => {\n",
        "                const content = header.nextElementSibling;\n",
        "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
        "                    content.style.display = \"block\";\n",
        "                } else {\n",
        "                    content.style.display = \"none\";\n",
        "                }\n",
        "            });\n",
        "        });\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "25-KqWKGD6lE",
        "outputId": "89d3dbd4-7957-4c65-f764-43afe60bbc86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Introducción a Pregel en el Procesamiento de Grafos Distribuidos</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2, h3 {\n",
              "            color: #333;\n",
              "            font-size: 1.6em;\n",
              "            cursor: pointer;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p, ul, li {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .navbar {\n",
              "            text-align: center;\n",
              "            margin: 20px 0;\n",
              "        }\n",
              "        .navbar a {\n",
              "            color: #0056b3;\n",
              "            margin: 0 15px;\n",
              "            font-size: 1.1em;\n",
              "            text-decoration: none;\n",
              "        }\n",
              "        .navbar a:hover {\n",
              "            text-decoration: underline;\n",
              "        }\n",
              "        .content {\n",
              "            display: none;\n",
              "            margin-top: 10px;\n",
              "            padding-left: 10px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <!-- Barra de Navegación Interna -->\n",
              "    <div class=\"navbar\">\n",
              "        <a href=\"#origen\">4.1 Origen y propósito</a> |\n",
              "        <a href=\"#modelo\">4.2 Modelo vertex-centric</a> |\n",
              "        <a href=\"#superpasos\">4.3 Superpasos</a>\n",
              "    </div>\n",
              "\n",
              "    <h1>Introducción a Pregel en el Procesamiento de Grafos Distribuidos</h1>\n",
              "\n",
              "    <h2 id=\"origen\">4.1 Origen y propósito de Pregel en el procesamiento de grafos distribuidos</h2>\n",
              "    <div class=\"content\">\n",
              "        <p><strong>Pregel</strong> fue desarrollado por Google como una solución innovadora para procesar grafos distribuidos a gran escala, diseñado específicamente para abordar los desafíos de escalabilidad y eficiencia en la manipulación de grafos con millones o incluso miles de millones de nodos. El propósito de Pregel es permitir el procesamiento eficiente y paralelo de algoritmos complejos sobre grafos, como los algoritmos de búsqueda de caminos mínimos, detección de comunidades y análisis de influencia en redes sociales, entre otros.</p>\n",
              "\n",
              "        <p>La creación de Pregel fue impulsada por la necesidad de gestionar el volumen y la complejidad de datos en los sistemas de Google, donde las relaciones de los datos son tan masivas y densas que los métodos tradicionales de procesamiento se vuelven insuficientes. Los grafos a gran escala, como los de la web o las redes sociales, presentan relaciones densas que hacen que el procesamiento secuencial sea inviable debido a las limitaciones de tiempo y recursos. Pregel se diseñó para soportar un procesamiento altamente paralelo en una infraestructura distribuida, donde los cálculos se reparten entre múltiples nodos de procesamiento.</p>\n",
              "\n",
              "        <p>Al distribuir el procesamiento del grafo, Pregel logra realizar en entornos de gran escala lo que algoritmos como Dijkstra sólo pueden ofrecer en grafos más pequeños. Su arquitectura permite que cada parte del grafo se procese de manera independiente, manteniendo la eficiencia incluso en grafos de gran escala.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2 id=\"modelo\">4.2 Modelo de procesamiento \"vertex-centric\" o centrado en el vértice</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>Pregel implementa un modelo de procesamiento <strong>\"vertex-centric\"</strong> o centrado en el vértice, una metodología en la que cada nodo (o vértice) en el grafo realiza cálculos individuales basados en la información de sus vecinos. En este modelo, cada nodo actúa como una \"unidad\" autónoma que realiza operaciones basadas en los mensajes o datos que recibe de los nodos conectados a él. Este enfoque es fundamental para la escalabilidad en grafos grandes, ya que permite que el procesamiento se divida y paralelice de manera natural.</p>\n",
              "\n",
              "        <p>El modelo centrado en el vértice tiene varias ventajas:</p>\n",
              "        <ul>\n",
              "            <li><strong>Facilita el procesamiento paralelo</strong>: Cada nodo trabaja de manera independiente, procesando la información de sus vecinos y enviando los resultados a otros nodos, lo que permite que múltiples nodos trabajen al mismo tiempo sin interferencias.</li>\n",
              "            <li><strong>Optimización en entornos distribuidos</strong>: La independencia de cada nodo minimiza la necesidad de sincronización compleja y facilita la distribución del grafo entre múltiples servidores o nodos de procesamiento, haciendo que Pregel pueda escalar de manera eficiente en grandes infraestructuras.</li>\n",
              "            <li><strong>Flexibilidad para diversos algoritmos</strong>: La arquitectura de Pregel se adapta bien a una variedad de algoritmos de grafos, como el cálculo de caminos mínimos, la detección de comunidades y la identificación de patrones en redes sociales, lo que permite aplicarlo en distintas industrias y casos de uso.</li>\n",
              "        </ul>\n",
              "\n",
              "        <p>El enfoque centrado en el vértice de Pregel es una de las claves para su rendimiento en entornos de gran escala, ya que maximiza la paralelización y permite un procesamiento altamente eficiente en sistemas distribuidos.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2 id=\"superpasos\">4.3 Superpasos y procesamiento paralelo en grafos a gran escala</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>Pregel organiza el procesamiento de grafos en una serie de <strong>superpasos</strong>. En cada superpaso, los nodos (o vértices) del grafo ejecutan cálculos en paralelo y envían mensajes a sus nodos vecinos. Este enfoque permite mantener la sincronización y coordinación entre los nodos en cada etapa del cálculo, lo cual es esencial para garantizar la integridad del procesamiento en un sistema distribuido.</p>\n",
              "\n",
              "        <p>El proceso de superpasos se descompone en las siguientes fases:</p>\n",
              "        <ul>\n",
              "            <li><strong>Cálculo paralelo en cada nodo</strong>: Cada nodo procesa los datos que ha recibido de sus vecinos y actualiza su estado local. Luego, envía mensajes a sus vecinos con la información actualizada, si corresponde.</li>\n",
              "            <li><strong>Sincronización entre nodos al final del superpaso</strong>: Al concluir el superpaso, cada nodo espera hasta que todos hayan completado su procesamiento. Una vez que todos los nodos terminan, los mensajes enviados se entregan a los nodos correspondientes.</li>\n",
              "            <li><strong>Iteración de superpasos hasta la convergencia</strong>: El proceso continúa en múltiples superpasos hasta que el algoritmo \"converge\", cuando todos los nodos han alcanzado una solución estable.</li>\n",
              "        </ul>\n",
              "\n",
              "        <p>El enfoque de los superpasos permite que Pregel reduzca el tiempo necesario para calcular caminos mínimos y realizar otros cálculos en grafos de gran tamaño. La paralelización en cada superpaso hace posible que millones de nodos trabajen simultáneamente, disminuyendo significativamente los tiempos de procesamiento en comparación con algoritmos secuenciales.</p>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        document.querySelectorAll(\"h2\").forEach(header => {\n",
              "            header.addEventListener(\"click\", () => {\n",
              "                const content = header.nextElementSibling;\n",
              "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
              "                    content.style.display = \"block\";\n",
              "                } else {\n",
              "                    content.style.display = \"none\";\n",
              "                }\n",
              "            });\n",
              "        });\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML con secciones colapsables en Google Colab\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Apache Giraph: Adaptación de Pregel en Big Data</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 1.6em;\n",
        "            cursor: pointer;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p, ul, li {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .content {\n",
        "            display: none;\n",
        "            margin-top: 10px;\n",
        "            padding-left: 10px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Apache Giraph: Adaptación de Pregel en Big Data</h1>\n",
        "\n",
        "    <h2>5.1 Inspiración en Pregel para el desarrollo de Apache Giraph</h2>\n",
        "    <div class=\"content\">\n",
        "        <p><strong>Apache Giraph</strong> es un proyecto de código abierto desarrollado como una implementación de Pregel, adaptado para el ecosistema de Big Data. Inspirado en la arquitectura y modelo de procesamiento de Pregel, Giraph ofrece a las organizaciones una solución accesible para manejar grafos de gran escala. Gracias a esta inspiración, Giraph permite aplicar un modelo de procesamiento distribuido y paralelizado en grafos, lo cual resulta esencial para entornos donde la escala y complejidad de las redes superan las capacidades de procesamiento de una máquina única.</p>\n",
        "\n",
        "        <p>Giraph toma el enfoque <strong>centrado en el vértice</strong> de Pregel, donde cada nodo de un grafo opera de manera autónoma y envía mensajes a sus nodos vecinos. Este modelo permite que cada nodo procese datos de manera independiente, facilitando la paralelización y optimización en sistemas distribuidos. Giraph es particularmente útil para tareas de análisis de grafos en tiempo real, tales como la búsqueda de caminos mínimos, la identificación de patrones de conexión y el análisis de redes sociales, entre otros.</p>\n",
        "\n",
        "        <p>Al basarse en el modelo de Pregel, Giraph ha permitido a muchas organizaciones que utilizan infraestructuras de Big Data acceder a un sistema distribuido de procesamiento de grafos sin depender de soluciones propietarias. Esta flexibilidad ha hecho que Giraph gane popularidad entre empresas que necesitan un sistema escalable, adaptable y compatible con el ecosistema Hadoop.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2>5.2 Implementación sobre Hadoop para entornos de Big Data</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>Una de las características clave de Apache Giraph es su implementación sobre <strong>Hadoop</strong>, una plataforma de procesamiento de Big Data ampliamente adoptada. Hadoop proporciona un sistema de archivos distribuido y una arquitectura orientada a ejecutar tareas en paralelo, lo cual facilita la ejecución de Giraph en sistemas de almacenamiento y procesamiento distribuidos.</p>\n",
        "\n",
        "        <p>Giraph se ejecuta en el entorno de procesamiento <strong>MapReduce</strong> de Hadoop, lo cual permite que aproveche las capacidades de procesamiento distribuido de esta plataforma. A través de Hadoop, Giraph divide un grafo en múltiples partes, distribuyendo el trabajo entre diferentes nodos de procesamiento. Esta arquitectura permite a Giraph procesar grandes grafos de manera eficiente, manteniendo el enfoque centrado en el vértice y facilitando la sincronización entre nodos en cada \"superpaso\".</p>\n",
        "\n",
        "        <p>Las ventajas de esta implementación incluyen:</p>\n",
        "        <ul>\n",
        "            <li><strong>Integración en infraestructuras de Big Data</strong>: Giraph puede integrarse fácilmente en cualquier infraestructura que utilice Hadoop, aprovechando las capacidades de almacenamiento distribuido de HDFS (Hadoop Distributed File System) y el marco MapReduce.</li>\n",
        "            <li><strong>Escalabilidad horizontal</strong>: Al ejecutarse en un entorno distribuido, Giraph escala de forma horizontal, añadiendo más nodos de procesamiento en lugar de depender de un solo servidor de gran capacidad.</li>\n",
        "            <li><strong>Reducción de tiempos de procesamiento</strong>: Giraph procesa múltiples partes de un grafo simultáneamente en diferentes nodos, disminuyendo los tiempos de procesamiento que serían prohibitivos en un entorno centralizado.</li>\n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <h2>5.3 Ventajas de Giraph para organizaciones con infraestructura de Big Data</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>Apache Giraph ofrece una serie de ventajas importantes para las organizaciones que ya utilizan infraestructura de Big Data:</p>\n",
        "\n",
        "        <ul>\n",
        "            <li><strong>Optimización de costos</strong>: Giraph permite a las empresas analizar grafos de gran escala sin la necesidad de un hardware específico o de soluciones propietarias costosas. Al ejecutarse sobre Hadoop, las organizaciones pueden aprovechar su infraestructura existente, optimizando el uso de recursos sin requerir un sistema completamente nuevo.</li>\n",
        "            <li><strong>Accesibilidad y adaptabilidad</strong>: Como solución de código abierto, Giraph es accesible para cualquier organización, sin barreras de licencia. Esto facilita la adopción en distintas industrias y permite a los equipos técnicos adaptar Giraph a sus necesidades específicas.</li>\n",
        "            <li><strong>Eficiencia en el procesamiento de grafos grandes</strong>: Giraph es capaz de procesar grandes grafos de manera rápida y eficiente en un entorno distribuido, permitiendo implementaciones de algoritmos complejos de análisis de grafos a gran escala y en tiempo real.</li>\n",
        "            <li><strong>Mejora de la capacidad de análisis</strong>: Las organizaciones que dependen de redes complejas pueden utilizar Giraph para mejorar sus capacidades de análisis, optimizando rutas, personalizando contenido o analizando tendencias.</li>\n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        document.querySelectorAll(\"h2\").forEach(header => {\n",
        "            header.addEventListener(\"click\", () => {\n",
        "                const content = header.nextElementSibling;\n",
        "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
        "                    content.style.display = \"block\";\n",
        "                } else {\n",
        "                    content.style.display = \"none\";\n",
        "                }\n",
        "            });\n",
        "        });\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "id": "YBeZ16hNFtJm",
        "outputId": "76f98015-3f4a-4b5e-9253-03a7e4ea9db8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 644
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Apache Giraph: Adaptación de Pregel en Big Data</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 1.6em;\n",
              "            cursor: pointer;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p, ul, li {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .content {\n",
              "            display: none;\n",
              "            margin-top: 10px;\n",
              "            padding-left: 10px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Apache Giraph: Adaptación de Pregel en Big Data</h1>\n",
              "\n",
              "    <h2>5.1 Inspiración en Pregel para el desarrollo de Apache Giraph</h2>\n",
              "    <div class=\"content\">\n",
              "        <p><strong>Apache Giraph</strong> es un proyecto de código abierto desarrollado como una implementación de Pregel, adaptado para el ecosistema de Big Data. Inspirado en la arquitectura y modelo de procesamiento de Pregel, Giraph ofrece a las organizaciones una solución accesible para manejar grafos de gran escala. Gracias a esta inspiración, Giraph permite aplicar un modelo de procesamiento distribuido y paralelizado en grafos, lo cual resulta esencial para entornos donde la escala y complejidad de las redes superan las capacidades de procesamiento de una máquina única.</p>\n",
              "\n",
              "        <p>Giraph toma el enfoque <strong>centrado en el vértice</strong> de Pregel, donde cada nodo de un grafo opera de manera autónoma y envía mensajes a sus nodos vecinos. Este modelo permite que cada nodo procese datos de manera independiente, facilitando la paralelización y optimización en sistemas distribuidos. Giraph es particularmente útil para tareas de análisis de grafos en tiempo real, tales como la búsqueda de caminos mínimos, la identificación de patrones de conexión y el análisis de redes sociales, entre otros.</p>\n",
              "\n",
              "        <p>Al basarse en el modelo de Pregel, Giraph ha permitido a muchas organizaciones que utilizan infraestructuras de Big Data acceder a un sistema distribuido de procesamiento de grafos sin depender de soluciones propietarias. Esta flexibilidad ha hecho que Giraph gane popularidad entre empresas que necesitan un sistema escalable, adaptable y compatible con el ecosistema Hadoop.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2>5.2 Implementación sobre Hadoop para entornos de Big Data</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>Una de las características clave de Apache Giraph es su implementación sobre <strong>Hadoop</strong>, una plataforma de procesamiento de Big Data ampliamente adoptada. Hadoop proporciona un sistema de archivos distribuido y una arquitectura orientada a ejecutar tareas en paralelo, lo cual facilita la ejecución de Giraph en sistemas de almacenamiento y procesamiento distribuidos.</p>\n",
              "\n",
              "        <p>Giraph se ejecuta en el entorno de procesamiento <strong>MapReduce</strong> de Hadoop, lo cual permite que aproveche las capacidades de procesamiento distribuido de esta plataforma. A través de Hadoop, Giraph divide un grafo en múltiples partes, distribuyendo el trabajo entre diferentes nodos de procesamiento. Esta arquitectura permite a Giraph procesar grandes grafos de manera eficiente, manteniendo el enfoque centrado en el vértice y facilitando la sincronización entre nodos en cada \"superpaso\".</p>\n",
              "\n",
              "        <p>Las ventajas de esta implementación incluyen:</p>\n",
              "        <ul>\n",
              "            <li><strong>Integración en infraestructuras de Big Data</strong>: Giraph puede integrarse fácilmente en cualquier infraestructura que utilice Hadoop, aprovechando las capacidades de almacenamiento distribuido de HDFS (Hadoop Distributed File System) y el marco MapReduce.</li>\n",
              "            <li><strong>Escalabilidad horizontal</strong>: Al ejecutarse en un entorno distribuido, Giraph escala de forma horizontal, añadiendo más nodos de procesamiento en lugar de depender de un solo servidor de gran capacidad.</li>\n",
              "            <li><strong>Reducción de tiempos de procesamiento</strong>: Giraph procesa múltiples partes de un grafo simultáneamente en diferentes nodos, disminuyendo los tiempos de procesamiento que serían prohibitivos en un entorno centralizado.</li>\n",
              "        </ul>\n",
              "    </div>\n",
              "\n",
              "    <h2>5.3 Ventajas de Giraph para organizaciones con infraestructura de Big Data</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>Apache Giraph ofrece una serie de ventajas importantes para las organizaciones que ya utilizan infraestructura de Big Data:</p>\n",
              "\n",
              "        <ul>\n",
              "            <li><strong>Optimización de costos</strong>: Giraph permite a las empresas analizar grafos de gran escala sin la necesidad de un hardware específico o de soluciones propietarias costosas. Al ejecutarse sobre Hadoop, las organizaciones pueden aprovechar su infraestructura existente, optimizando el uso de recursos sin requerir un sistema completamente nuevo.</li>\n",
              "            <li><strong>Accesibilidad y adaptabilidad</strong>: Como solución de código abierto, Giraph es accesible para cualquier organización, sin barreras de licencia. Esto facilita la adopción en distintas industrias y permite a los equipos técnicos adaptar Giraph a sus necesidades específicas.</li>\n",
              "            <li><strong>Eficiencia en el procesamiento de grafos grandes</strong>: Giraph es capaz de procesar grandes grafos de manera rápida y eficiente en un entorno distribuido, permitiendo implementaciones de algoritmos complejos de análisis de grafos a gran escala y en tiempo real.</li>\n",
              "            <li><strong>Mejora de la capacidad de análisis</strong>: Las organizaciones que dependen de redes complejas pueden utilizar Giraph para mejorar sus capacidades de análisis, optimizando rutas, personalizando contenido o analizando tendencias.</li>\n",
              "        </ul>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        document.querySelectorAll(\"h2\").forEach(header => {\n",
              "            header.addEventListener(\"click\", () => {\n",
              "                const content = header.nextElementSibling;\n",
              "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
              "                    content.style.display = \"block\";\n",
              "                } else {\n",
              "                    content.style.display = \"none\";\n",
              "                }\n",
              "            });\n",
              "        });\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML con secciones colapsables para Google Colab\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Adaptación del Algoritmo de Dijkstra en Apache Giraph y Pregel</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 1.6em;\n",
        "            cursor: pointer;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p, ul, li {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .content {\n",
        "            display: none;\n",
        "            margin-top: 10px;\n",
        "            padding-left: 10px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Adaptación del Algoritmo de Dijkstra en Apache Giraph y Pregel</h1>\n",
        "\n",
        "    <h2>6.1 Optimización del cálculo de rutas en grafos grandes</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>El algoritmo de Dijkstra, aunque efectivo para la búsqueda de caminos mínimos en grafos pequeños y medianos, presenta limitaciones en escalabilidad cuando se aplica a grafos masivos, como los que se encuentran en el contexto de Big Data. Para superar estas limitaciones y optimizar el cálculo de rutas en grafos grandes, Apache Giraph y Pregel implementan una adaptación del algoritmo que aprovecha sus arquitecturas distribuidas y paralelizadas.</p>\n",
        "\n",
        "        <p>La adaptación del algoritmo de Dijkstra en estos sistemas distribuidos sigue los principios del procesamiento vertex-centric (centrado en el vértice), donde cada nodo actúa de forma autónoma, calculando el costo de las rutas mínimas basadas en los datos recibidos de sus nodos vecinos. Este enfoque permite procesar rutas en paralelo y reduce el tiempo de cómputo al evitar el procesamiento secuencial de cada nodo.</p>\n",
        "\n",
        "        <p>Mediante esta optimización, se logra:</p>\n",
        "        <ul>\n",
        "            <li><strong>Procesar caminos mínimos de manera simultánea en múltiples nodos</strong>: Esto disminuye el tiempo necesario para calcular rutas y reduce la carga sobre cada nodo individual.</li>\n",
        "            <li><strong>Adaptación al volumen de datos de Big Data</strong>: La estructura distribuida de Giraph y Pregel permite dividir el trabajo entre cientos o miles de máquinas, logrando que la búsqueda de rutas mínimas sea factible incluso en grafos de millones de nodos y aristas.</li>\n",
        "            <li><strong>Reducción de latencia en aplicaciones en tiempo real</strong>: Con la optimización de Dijkstra en un entorno distribuido, el tiempo de respuesta se mantiene bajo, crucial para aplicaciones en tiempo real que requieren optimización de rutas y decisiones en redes de gran escala.</li>\n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <h2>6.2 División de tareas en el modelo distribuido para rutas mínimas</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>La división de tareas es fundamental para la adaptación de Dijkstra en un entorno distribuido como el que ofrecen Giraph y Pregel. El modelo centrado en el vértice permite que el grafo se divida en segmentos o subgrafos, de manera que cada nodo procese su propio estado y envíe mensajes únicamente a sus vecinos inmediatos. Esta organización minimiza la cantidad de datos que se transfieren entre nodos, optimizando la comunicación y el procesamiento en paralelo.</p>\n",
        "\n",
        "        <p>En el modelo distribuido:</p>\n",
        "        <ul>\n",
        "            <li><strong>Asignación de subgrafos a nodos de procesamiento</strong>: Cada nodo en la red distribuida recibe una porción del grafo, que puede incluir varios nodos del grafo original junto con sus conexiones (aristas).</li>\n",
        "            <li><strong>Cálculo de rutas en cada nodo</strong>: Cada nodo calcula el costo de las rutas mínimas hacia sus vecinos, enviando estos resultados a sus nodos vecinos y permitiendo que los costos de ruta se actualicen progresivamente en el grafo completo.</li>\n",
        "            <li><strong>Sincronización entre superpasos</strong>: Al final de cada \"superpaso\" o iteración, todos los nodos sincronizan sus datos para asegurar que el cálculo de costos de ruta sea consistente, propagando las rutas de menor costo en el grafo y asegurando la convergencia en todos los nodos.</li>\n",
        "        </ul>\n",
        "        <p>Esta división de tareas asegura que el algoritmo pueda escalar eficientemente en infraestructuras distribuidas y permite una búsqueda óptima de caminos mínimos en grafos grandes que no podrían manejarse en un solo servidor.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2>6.3 Ejemplos de implementación en redes complejas</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>La adaptación de Dijkstra en Apache Giraph y Pregel ha encontrado aplicaciones en varias áreas donde se manejan grafos complejos y de gran escala. Algunos ejemplos de implementación incluyen:</p>\n",
        "        <ul>\n",
        "            <li><strong>Optimización de redes de transporte urbano</strong>: En sistemas de transporte masivo, como los metros o redes de autobuses de grandes ciudades, se emplea el cálculo de rutas mínimas para identificar las trayectorias óptimas entre estaciones o paradas.</li>\n",
        "            <li><strong>Redes sociales y recomendaciones de conexión</strong>: Las plataformas de redes sociales utilizan el cálculo de rutas mínimas para identificar conexiones potenciales entre usuarios y sugerir relaciones basadas en la cercanía de nodos en el grafo social.</li>\n",
        "            <li><strong>Logística y distribución de bienes</strong>: Las empresas de logística utilizan grafos para representar sus redes de distribución y optimizar rutas de entrega, calculando rutas de menor costo para camiones y vehículos de entrega.</li>\n",
        "            <li><strong>Telecomunicaciones y redes de datos</strong>: En redes de telecomunicaciones, la adaptación de Dijkstra permite gestionar de manera más eficiente el tráfico de datos, identificando rutas óptimas entre servidores y nodos de red.</li>\n",
        "        </ul>\n",
        "        <p>Estos ejemplos demuestran cómo la adaptación de Dijkstra en Giraph y Pregel permite manejar la complejidad de grafos de gran escala en diversas industrias, optimizando redes y mejorando la eficiencia de los sistemas que dependen de análisis de rutas mínimas en entornos de Big Data.</p>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        document.querySelectorAll(\"h2\").forEach(header => {\n",
        "            header.addEventListener(\"click\", () => {\n",
        "                const content = header.nextElementSibling;\n",
        "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
        "                    content.style.display = \"block\";\n",
        "                } else {\n",
        "                    content.style.display = \"none\";\n",
        "                }\n",
        "            });\n",
        "        });\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 778
        },
        "id": "CI8EQd_ekwAd",
        "outputId": "758301f7-9635-48ba-8487-7ee15943e3fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Adaptación del Algoritmo de Dijkstra en Apache Giraph y Pregel</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 1.6em;\n",
              "            cursor: pointer;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p, ul, li {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .content {\n",
              "            display: none;\n",
              "            margin-top: 10px;\n",
              "            padding-left: 10px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Adaptación del Algoritmo de Dijkstra en Apache Giraph y Pregel</h1>\n",
              "\n",
              "    <h2>6.1 Optimización del cálculo de rutas en grafos grandes</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>El algoritmo de Dijkstra, aunque efectivo para la búsqueda de caminos mínimos en grafos pequeños y medianos, presenta limitaciones en escalabilidad cuando se aplica a grafos masivos, como los que se encuentran en el contexto de Big Data. Para superar estas limitaciones y optimizar el cálculo de rutas en grafos grandes, Apache Giraph y Pregel implementan una adaptación del algoritmo que aprovecha sus arquitecturas distribuidas y paralelizadas.</p>\n",
              "\n",
              "        <p>La adaptación del algoritmo de Dijkstra en estos sistemas distribuidos sigue los principios del procesamiento vertex-centric (centrado en el vértice), donde cada nodo actúa de forma autónoma, calculando el costo de las rutas mínimas basadas en los datos recibidos de sus nodos vecinos. Este enfoque permite procesar rutas en paralelo y reduce el tiempo de cómputo al evitar el procesamiento secuencial de cada nodo.</p>\n",
              "\n",
              "        <p>Mediante esta optimización, se logra:</p>\n",
              "        <ul>\n",
              "            <li><strong>Procesar caminos mínimos de manera simultánea en múltiples nodos</strong>: Esto disminuye el tiempo necesario para calcular rutas y reduce la carga sobre cada nodo individual.</li>\n",
              "            <li><strong>Adaptación al volumen de datos de Big Data</strong>: La estructura distribuida de Giraph y Pregel permite dividir el trabajo entre cientos o miles de máquinas, logrando que la búsqueda de rutas mínimas sea factible incluso en grafos de millones de nodos y aristas.</li>\n",
              "            <li><strong>Reducción de latencia en aplicaciones en tiempo real</strong>: Con la optimización de Dijkstra en un entorno distribuido, el tiempo de respuesta se mantiene bajo, crucial para aplicaciones en tiempo real que requieren optimización de rutas y decisiones en redes de gran escala.</li>\n",
              "        </ul>\n",
              "    </div>\n",
              "\n",
              "    <h2>6.2 División de tareas en el modelo distribuido para rutas mínimas</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>La división de tareas es fundamental para la adaptación de Dijkstra en un entorno distribuido como el que ofrecen Giraph y Pregel. El modelo centrado en el vértice permite que el grafo se divida en segmentos o subgrafos, de manera que cada nodo procese su propio estado y envíe mensajes únicamente a sus vecinos inmediatos. Esta organización minimiza la cantidad de datos que se transfieren entre nodos, optimizando la comunicación y el procesamiento en paralelo.</p>\n",
              "\n",
              "        <p>En el modelo distribuido:</p>\n",
              "        <ul>\n",
              "            <li><strong>Asignación de subgrafos a nodos de procesamiento</strong>: Cada nodo en la red distribuida recibe una porción del grafo, que puede incluir varios nodos del grafo original junto con sus conexiones (aristas).</li>\n",
              "            <li><strong>Cálculo de rutas en cada nodo</strong>: Cada nodo calcula el costo de las rutas mínimas hacia sus vecinos, enviando estos resultados a sus nodos vecinos y permitiendo que los costos de ruta se actualicen progresivamente en el grafo completo.</li>\n",
              "            <li><strong>Sincronización entre superpasos</strong>: Al final de cada \"superpaso\" o iteración, todos los nodos sincronizan sus datos para asegurar que el cálculo de costos de ruta sea consistente, propagando las rutas de menor costo en el grafo y asegurando la convergencia en todos los nodos.</li>\n",
              "        </ul>\n",
              "        <p>Esta división de tareas asegura que el algoritmo pueda escalar eficientemente en infraestructuras distribuidas y permite una búsqueda óptima de caminos mínimos en grafos grandes que no podrían manejarse en un solo servidor.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2>6.3 Ejemplos de implementación en redes complejas</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>La adaptación de Dijkstra en Apache Giraph y Pregel ha encontrado aplicaciones en varias áreas donde se manejan grafos complejos y de gran escala. Algunos ejemplos de implementación incluyen:</p>\n",
              "        <ul>\n",
              "            <li><strong>Optimización de redes de transporte urbano</strong>: En sistemas de transporte masivo, como los metros o redes de autobuses de grandes ciudades, se emplea el cálculo de rutas mínimas para identificar las trayectorias óptimas entre estaciones o paradas.</li>\n",
              "            <li><strong>Redes sociales y recomendaciones de conexión</strong>: Las plataformas de redes sociales utilizan el cálculo de rutas mínimas para identificar conexiones potenciales entre usuarios y sugerir relaciones basadas en la cercanía de nodos en el grafo social.</li>\n",
              "            <li><strong>Logística y distribución de bienes</strong>: Las empresas de logística utilizan grafos para representar sus redes de distribución y optimizar rutas de entrega, calculando rutas de menor costo para camiones y vehículos de entrega.</li>\n",
              "            <li><strong>Telecomunicaciones y redes de datos</strong>: En redes de telecomunicaciones, la adaptación de Dijkstra permite gestionar de manera más eficiente el tráfico de datos, identificando rutas óptimas entre servidores y nodos de red.</li>\n",
              "        </ul>\n",
              "        <p>Estos ejemplos demuestran cómo la adaptación de Dijkstra en Giraph y Pregel permite manejar la complejidad de grafos de gran escala en diversas industrias, optimizando redes y mejorando la eficiencia de los sistemas que dependen de análisis de rutas mínimas en entornos de Big Data.</p>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        document.querySelectorAll(\"h2\").forEach(header => {\n",
              "            header.addEventListener(\"click\", () => {\n",
              "                const content = header.nextElementSibling;\n",
              "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
              "                    content.style.display = \"block\";\n",
              "                } else {\n",
              "                    content.style.display = \"none\";\n",
              "                }\n",
              "            });\n",
              "        });\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML con secciones colapsables en Google Colab\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Aplicaciones de Dijkstra Adaptado en Big Data</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 1.6em;\n",
        "            cursor: pointer;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p, ul, li {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .content {\n",
        "            display: none;\n",
        "            margin-top: 10px;\n",
        "            padding-left: 10px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Aplicaciones de Dijkstra Adaptado en Big Data</h1>\n",
        "\n",
        "    <h2>7.1 Optimización de rutas en sistemas logísticos</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>En el sector logístico, la optimización de rutas es un elemento crítico para la eficiencia operativa. Empresas de transporte y distribución gestionan redes complejas de almacenes, centros de distribución y rutas de entrega, donde encontrar el camino de menor costo puede representar una reducción significativa de tiempo y recursos. La adaptación del algoritmo de Dijkstra para entornos de Big Data permite a estas empresas calcular rutas óptimas en tiempo real y en redes de gran escala, proporcionando beneficios como:</p>\n",
        "        <ul>\n",
        "            <li><strong>Reducción de costos de transporte</strong>: Al encontrar rutas más cortas y eficientes, las empresas logísticas pueden disminuir el consumo de combustible y reducir los costos operativos, optimizando las entregas en áreas con alta densidad de pedidos.</li>\n",
        "            <li><strong>Mejora en los tiempos de entrega</strong>: Las rutas optimizadas facilitan la entrega rápida y puntual, mejorando la satisfacción del cliente y permitiendo una rotación de inventario más rápida en los centros de distribución.</li>\n",
        "            <li><strong>Adaptación a factores dinámicos</strong>: Gracias al procesamiento en tiempo real, el algoritmo adaptado permite recalcular rutas en función de factores cambiantes, como el tráfico, las condiciones meteorológicas y las restricciones de carga en las carreteras. Esto resulta en una operación más flexible y en la capacidad de adaptarse a situaciones imprevistas en el transporte.</li>\n",
        "        </ul>\n",
        "        <p>Las empresas de logística utilizan sistemas distribuidos como Apache Giraph y Pregel para gestionar estas redes de entrega a gran escala, aplicando algoritmos de caminos mínimos en grafos complejos que abarcan miles de ubicaciones y puntos de entrega.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2>7.2 Conexiones y rutas en redes sociales</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>En el ámbito de las redes sociales, la identificación de conexiones y rutas de relación es fundamental para mejorar la experiencia del usuario y personalizar la interacción. Adaptando el algoritmo de Dijkstra en un entorno de Big Data, las plataformas de redes sociales pueden gestionar redes masivas de usuarios y conexiones, logrando:</p>\n",
        "        <ul>\n",
        "            <li><strong>Recomendación de conexiones</strong>: Utilizando caminos mínimos, las redes sociales pueden recomendar conexiones entre usuarios con intereses y círculos sociales similares, mejorando la experiencia del usuario al aumentar la relevancia de las conexiones sugeridas.</li>\n",
        "            <li><strong>Detección de comunidades</strong>: Al analizar las conexiones de camino mínimo entre usuarios, las plataformas pueden identificar grupos o comunidades dentro de la red social, permitiendo segmentar audiencias y ofrecer contenido personalizado según los intereses de cada grupo.</li>\n",
        "            <li><strong>Propagación de contenido e influencia</strong>: El análisis de rutas en redes sociales permite identificar los caminos de propagación de contenido y medir el alcance de la influencia de ciertos usuarios, útil para detectar a los \"influencers\" dentro de la red.</li>\n",
        "        </ul>\n",
        "        <p>Gracias a herramientas como Giraph y Pregel, los cálculos de Dijkstra adaptados a estos grandes grafos sociales pueden realizarse de forma distribuida, permitiendo que las plataformas de redes sociales procesen rápidamente los datos de millones de usuarios y conexiones.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2>7.3 Casos de uso en redes de transporte y telecomunicaciones</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>Las redes de transporte y telecomunicaciones representan un área crucial de aplicación para Dijkstra adaptado en Big Data, dado que ambos sistemas requieren optimización continua de rutas y conexiones en redes complejas de nodos.</p>\n",
        "        <ul>\n",
        "            <li><strong>Redes de transporte urbano</strong>: En sistemas de transporte masivo como trenes, autobuses y metro, los operadores necesitan identificar las rutas más eficientes para los pasajeros. Mediante el cálculo de caminos mínimos, las autoridades de transporte pueden sugerir las rutas óptimas y minimizar los tiempos de viaje. La implementación de Dijkstra adaptado en entornos distribuidos permite realizar estos cálculos a gran escala y en tiempo real.</li>\n",
        "            <li><strong>Telecomunicaciones y optimización de ancho de banda</strong>: Las redes de telecomunicaciones, como las de proveedores de internet y telefonía móvil, dependen de la optimización de rutas para gestionar el tráfico de datos. La capacidad de calcular el camino óptimo para el enrutamiento de datos permite reducir la latencia y maximizar el uso del ancho de banda.</li>\n",
        "            <li><strong>Gestión de emergencias y rutas de evacuación</strong>: En situaciones de emergencia, como desastres naturales, es vital contar con rutas de evacuación optimizadas. La adaptación de Dijkstra en sistemas distribuidos permite calcular rápidamente las rutas de salida seguras y eficientes en entornos urbanos.</li>\n",
        "        </ul>\n",
        "        <p>En todos estos casos, el uso de Apache Giraph y Pregel para ejecutar algoritmos de caminos mínimos adaptados a Big Data permite a las organizaciones optimizar la eficiencia de sus redes, mejorar la experiencia de los usuarios y maximizar el rendimiento de sus infraestructuras de transporte y telecomunicaciones.</p>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        document.querySelectorAll(\"h2\").forEach(header => {\n",
        "            header.addEventListener(\"click\", () => {\n",
        "                const content = header.nextElementSibling;\n",
        "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
        "                    content.style.display = \"block\";\n",
        "                } else {\n",
        "                    content.style.display = \"none\";\n",
        "                }\n",
        "            });\n",
        "        });\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 765
        },
        "id": "cPU2-yRPfeTk",
        "outputId": "89c5d7e7-604c-42d6-9be5-2d3589c3ce45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Aplicaciones de Dijkstra Adaptado en Big Data</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 1.6em;\n",
              "            cursor: pointer;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p, ul, li {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .content {\n",
              "            display: none;\n",
              "            margin-top: 10px;\n",
              "            padding-left: 10px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Aplicaciones de Dijkstra Adaptado en Big Data</h1>\n",
              "\n",
              "    <h2>7.1 Optimización de rutas en sistemas logísticos</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>En el sector logístico, la optimización de rutas es un elemento crítico para la eficiencia operativa. Empresas de transporte y distribución gestionan redes complejas de almacenes, centros de distribución y rutas de entrega, donde encontrar el camino de menor costo puede representar una reducción significativa de tiempo y recursos. La adaptación del algoritmo de Dijkstra para entornos de Big Data permite a estas empresas calcular rutas óptimas en tiempo real y en redes de gran escala, proporcionando beneficios como:</p>\n",
              "        <ul>\n",
              "            <li><strong>Reducción de costos de transporte</strong>: Al encontrar rutas más cortas y eficientes, las empresas logísticas pueden disminuir el consumo de combustible y reducir los costos operativos, optimizando las entregas en áreas con alta densidad de pedidos.</li>\n",
              "            <li><strong>Mejora en los tiempos de entrega</strong>: Las rutas optimizadas facilitan la entrega rápida y puntual, mejorando la satisfacción del cliente y permitiendo una rotación de inventario más rápida en los centros de distribución.</li>\n",
              "            <li><strong>Adaptación a factores dinámicos</strong>: Gracias al procesamiento en tiempo real, el algoritmo adaptado permite recalcular rutas en función de factores cambiantes, como el tráfico, las condiciones meteorológicas y las restricciones de carga en las carreteras. Esto resulta en una operación más flexible y en la capacidad de adaptarse a situaciones imprevistas en el transporte.</li>\n",
              "        </ul>\n",
              "        <p>Las empresas de logística utilizan sistemas distribuidos como Apache Giraph y Pregel para gestionar estas redes de entrega a gran escala, aplicando algoritmos de caminos mínimos en grafos complejos que abarcan miles de ubicaciones y puntos de entrega.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2>7.2 Conexiones y rutas en redes sociales</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>En el ámbito de las redes sociales, la identificación de conexiones y rutas de relación es fundamental para mejorar la experiencia del usuario y personalizar la interacción. Adaptando el algoritmo de Dijkstra en un entorno de Big Data, las plataformas de redes sociales pueden gestionar redes masivas de usuarios y conexiones, logrando:</p>\n",
              "        <ul>\n",
              "            <li><strong>Recomendación de conexiones</strong>: Utilizando caminos mínimos, las redes sociales pueden recomendar conexiones entre usuarios con intereses y círculos sociales similares, mejorando la experiencia del usuario al aumentar la relevancia de las conexiones sugeridas.</li>\n",
              "            <li><strong>Detección de comunidades</strong>: Al analizar las conexiones de camino mínimo entre usuarios, las plataformas pueden identificar grupos o comunidades dentro de la red social, permitiendo segmentar audiencias y ofrecer contenido personalizado según los intereses de cada grupo.</li>\n",
              "            <li><strong>Propagación de contenido e influencia</strong>: El análisis de rutas en redes sociales permite identificar los caminos de propagación de contenido y medir el alcance de la influencia de ciertos usuarios, útil para detectar a los \"influencers\" dentro de la red.</li>\n",
              "        </ul>\n",
              "        <p>Gracias a herramientas como Giraph y Pregel, los cálculos de Dijkstra adaptados a estos grandes grafos sociales pueden realizarse de forma distribuida, permitiendo que las plataformas de redes sociales procesen rápidamente los datos de millones de usuarios y conexiones.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2>7.3 Casos de uso en redes de transporte y telecomunicaciones</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>Las redes de transporte y telecomunicaciones representan un área crucial de aplicación para Dijkstra adaptado en Big Data, dado que ambos sistemas requieren optimización continua de rutas y conexiones en redes complejas de nodos.</p>\n",
              "        <ul>\n",
              "            <li><strong>Redes de transporte urbano</strong>: En sistemas de transporte masivo como trenes, autobuses y metro, los operadores necesitan identificar las rutas más eficientes para los pasajeros. Mediante el cálculo de caminos mínimos, las autoridades de transporte pueden sugerir las rutas óptimas y minimizar los tiempos de viaje. La implementación de Dijkstra adaptado en entornos distribuidos permite realizar estos cálculos a gran escala y en tiempo real.</li>\n",
              "            <li><strong>Telecomunicaciones y optimización de ancho de banda</strong>: Las redes de telecomunicaciones, como las de proveedores de internet y telefonía móvil, dependen de la optimización de rutas para gestionar el tráfico de datos. La capacidad de calcular el camino óptimo para el enrutamiento de datos permite reducir la latencia y maximizar el uso del ancho de banda.</li>\n",
              "            <li><strong>Gestión de emergencias y rutas de evacuación</strong>: En situaciones de emergencia, como desastres naturales, es vital contar con rutas de evacuación optimizadas. La adaptación de Dijkstra en sistemas distribuidos permite calcular rápidamente las rutas de salida seguras y eficientes en entornos urbanos.</li>\n",
              "        </ul>\n",
              "        <p>En todos estos casos, el uso de Apache Giraph y Pregel para ejecutar algoritmos de caminos mínimos adaptados a Big Data permite a las organizaciones optimizar la eficiencia de sus redes, mejorar la experiencia de los usuarios y maximizar el rendimiento de sus infraestructuras de transporte y telecomunicaciones.</p>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        document.querySelectorAll(\"h2\").forEach(header => {\n",
              "            header.addEventListener(\"click\", () => {\n",
              "                const content = header.nextElementSibling;\n",
              "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
              "                    content.style.display = \"block\";\n",
              "                } else {\n",
              "                    content.style.display = \"none\";\n",
              "                }\n",
              "            });\n",
              "        });\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML con secciones colapsables en Google Colab\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Visualización del Algoritmo de Dijkstra en Grafos Distribuidos</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 1.6em;\n",
        "            cursor: pointer;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p, ul, li {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .content {\n",
        "            display: none;\n",
        "            margin-top: 10px;\n",
        "            padding-left: 10px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Visualización del Algoritmo de Dijkstra en Grafos Distribuidos</h1>\n",
        "\n",
        "    <h2>8.1 Colores y estados en la visualización de nodos y aristas</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>La visualización es una herramienta clave para entender y analizar el comportamiento del <strong>algoritmo de Dijkstra</strong> en grafos, especialmente cuando se trabaja con sistemas distribuidos de gran escala. La representación gráfica permite seguir el progreso del algoritmo en tiempo real, lo que facilita la identificación de patrones y posibles cuellos de botella. En entornos de Big Data, donde los grafos contienen millones de nodos y aristas, los <strong>colores</strong> y <strong>estados visuales</strong> son útiles para diferenciar el estado de cada nodo y arista.</p>\n",
        "\n",
        "        <p>En una visualización típica de Dijkstra:</p>\n",
        "        <ul>\n",
        "            <li><strong>Nodos en procesamiento</strong>: Se utilizan colores brillantes, como el rojo, para representar los nodos que están siendo evaluados en el momento, facilitando la identificación del \"foco\" del algoritmo.</li>\n",
        "            <li><strong>Nodos explorados</strong>: Los nodos ya procesados y con rutas mínimas confirmadas se suelen marcar en azul, indicando que ya no se consideran en el cálculo de caminos mínimos adicionales.</li>\n",
        "            <li><strong>Aristas en verde</strong>: Las aristas que forman parte del camino mínimo confirmado se representan en verde, destacando las conexiones determinadas como parte de la ruta más corta.</li>\n",
        "        </ul>\n",
        "        <p>Este uso de colores ayuda a los analistas a seguir la secuencia del algoritmo de Dijkstra en un grafo complejo, facilitando la comprensión del progreso y el estado de cada nodo y arista durante el proceso de búsqueda de caminos mínimos.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2>8.2 Representación de nodos en procesamiento, explorados y confirmados</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>Una visualización efectiva del algoritmo de Dijkstra requiere la <strong>representación de los diferentes estados de los nodos</strong>, particularmente en entornos distribuidos. Los estados comunes incluyen:</p>\n",
        "        <ul>\n",
        "            <li><strong>Nodos en procesamiento</strong>: Nodos evaluados en el presente superpaso o iteración. La visualización resalta estos nodos, a menudo con un contorno grueso o un color brillante.</li>\n",
        "            <li><strong>Nodos explorados</strong>: Estos nodos ya han sido procesados y sus costos mínimos han sido determinados. Se representan con un color más suave, como azul claro, indicando que no serán seleccionados en futuras iteraciones.</li>\n",
        "            <li><strong>Nodos confirmados</strong>: Nodos que forman parte de la ruta mínima final o que ya han recibido su camino mínimo desde el nodo de origen. Se marcan con un color distintivo (por ejemplo, verde) o un icono especial.</li>\n",
        "        </ul>\n",
        "        <p>La representación de estos estados en la visualización permite a los operadores y analistas comprender el flujo del algoritmo de Dijkstra en tiempo real y evaluar el rendimiento en entornos de Big Data.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2>8.3 Importancia de la visualización en redes complejas de gran escala</h2>\n",
        "    <div class=\"content\">\n",
        "        <p>En el contexto de Big Data, la <strong>visualización del algoritmo de Dijkstra en grafos distribuidos</strong> es fundamental para el análisis y la optimización de redes complejas. Algunas de las ventajas de esta visualización incluyen:</p>\n",
        "        <ul>\n",
        "            <li><strong>Identificación de patrones y optimización de rutas</strong>: Facilita la identificación de rutas óptimas y patrones de conectividad, cruciales en redes logísticas, sociales y de transporte.</li>\n",
        "            <li><strong>Detección de cuellos de botella y puntos de congestión</strong>: Permite detectar en tiempo real los puntos de congestión, optimizando el flujo y evitando sobrecargas.</li>\n",
        "            <li><strong>Monitoreo de algoritmos distribuidos</strong>: En sistemas distribuidos, la visualización es esencial para supervisar el estado de cada subproceso y verificar la sincronización entre nodos de procesamiento.</li>\n",
        "            <li><strong>Comunicación de resultados y toma de decisiones</strong>: Las visualizaciones ayudan a los analistas y tomadores de decisiones a interpretar rápidamente los resultados del algoritmo, facilitando decisiones estratégicas.</li>\n",
        "        </ul>\n",
        "        <p>En conclusión, la visualización del algoritmo de Dijkstra en grafos distribuidos no solo permite un mejor seguimiento del cálculo, sino que también es clave para la eficiencia y optimización en redes complejas de gran escala. Facilita la comprensión del comportamiento de las rutas y conexiones en el sistema, brindando insights valiosos para optimizar rutas, recursos y estructuras de red.</p>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        document.querySelectorAll(\"h2\").forEach(header => {\n",
        "            header.addEventListener(\"click\", () => {\n",
        "                const content = header.nextElementSibling;\n",
        "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
        "                    content.style.display = \"block\";\n",
        "                } else {\n",
        "                    content.style.display = \"none\";\n",
        "                }\n",
        "            });\n",
        "        });\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        },
        "id": "nevpIsq2lny1",
        "outputId": "ea9aef0a-14ca-42b1-8640-4fe5235fba93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Visualización del Algoritmo de Dijkstra en Grafos Distribuidos</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 1.6em;\n",
              "            cursor: pointer;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p, ul, li {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .content {\n",
              "            display: none;\n",
              "            margin-top: 10px;\n",
              "            padding-left: 10px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Visualización del Algoritmo de Dijkstra en Grafos Distribuidos</h1>\n",
              "\n",
              "    <h2>8.1 Colores y estados en la visualización de nodos y aristas</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>La visualización es una herramienta clave para entender y analizar el comportamiento del <strong>algoritmo de Dijkstra</strong> en grafos, especialmente cuando se trabaja con sistemas distribuidos de gran escala. La representación gráfica permite seguir el progreso del algoritmo en tiempo real, lo que facilita la identificación de patrones y posibles cuellos de botella. En entornos de Big Data, donde los grafos contienen millones de nodos y aristas, los <strong>colores</strong> y <strong>estados visuales</strong> son útiles para diferenciar el estado de cada nodo y arista.</p>\n",
              "\n",
              "        <p>En una visualización típica de Dijkstra:</p>\n",
              "        <ul>\n",
              "            <li><strong>Nodos en procesamiento</strong>: Se utilizan colores brillantes, como el rojo, para representar los nodos que están siendo evaluados en el momento, facilitando la identificación del \"foco\" del algoritmo.</li>\n",
              "            <li><strong>Nodos explorados</strong>: Los nodos ya procesados y con rutas mínimas confirmadas se suelen marcar en azul, indicando que ya no se consideran en el cálculo de caminos mínimos adicionales.</li>\n",
              "            <li><strong>Aristas en verde</strong>: Las aristas que forman parte del camino mínimo confirmado se representan en verde, destacando las conexiones determinadas como parte de la ruta más corta.</li>\n",
              "        </ul>\n",
              "        <p>Este uso de colores ayuda a los analistas a seguir la secuencia del algoritmo de Dijkstra en un grafo complejo, facilitando la comprensión del progreso y el estado de cada nodo y arista durante el proceso de búsqueda de caminos mínimos.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2>8.2 Representación de nodos en procesamiento, explorados y confirmados</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>Una visualización efectiva del algoritmo de Dijkstra requiere la <strong>representación de los diferentes estados de los nodos</strong>, particularmente en entornos distribuidos. Los estados comunes incluyen:</p>\n",
              "        <ul>\n",
              "            <li><strong>Nodos en procesamiento</strong>: Nodos evaluados en el presente superpaso o iteración. La visualización resalta estos nodos, a menudo con un contorno grueso o un color brillante.</li>\n",
              "            <li><strong>Nodos explorados</strong>: Estos nodos ya han sido procesados y sus costos mínimos han sido determinados. Se representan con un color más suave, como azul claro, indicando que no serán seleccionados en futuras iteraciones.</li>\n",
              "            <li><strong>Nodos confirmados</strong>: Nodos que forman parte de la ruta mínima final o que ya han recibido su camino mínimo desde el nodo de origen. Se marcan con un color distintivo (por ejemplo, verde) o un icono especial.</li>\n",
              "        </ul>\n",
              "        <p>La representación de estos estados en la visualización permite a los operadores y analistas comprender el flujo del algoritmo de Dijkstra en tiempo real y evaluar el rendimiento en entornos de Big Data.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2>8.3 Importancia de la visualización en redes complejas de gran escala</h2>\n",
              "    <div class=\"content\">\n",
              "        <p>En el contexto de Big Data, la <strong>visualización del algoritmo de Dijkstra en grafos distribuidos</strong> es fundamental para el análisis y la optimización de redes complejas. Algunas de las ventajas de esta visualización incluyen:</p>\n",
              "        <ul>\n",
              "            <li><strong>Identificación de patrones y optimización de rutas</strong>: Facilita la identificación de rutas óptimas y patrones de conectividad, cruciales en redes logísticas, sociales y de transporte.</li>\n",
              "            <li><strong>Detección de cuellos de botella y puntos de congestión</strong>: Permite detectar en tiempo real los puntos de congestión, optimizando el flujo y evitando sobrecargas.</li>\n",
              "            <li><strong>Monitoreo de algoritmos distribuidos</strong>: En sistemas distribuidos, la visualización es esencial para supervisar el estado de cada subproceso y verificar la sincronización entre nodos de procesamiento.</li>\n",
              "            <li><strong>Comunicación de resultados y toma de decisiones</strong>: Las visualizaciones ayudan a los analistas y tomadores de decisiones a interpretar rápidamente los resultados del algoritmo, facilitando decisiones estratégicas.</li>\n",
              "        </ul>\n",
              "        <p>En conclusión, la visualización del algoritmo de Dijkstra en grafos distribuidos no solo permite un mejor seguimiento del cálculo, sino que también es clave para la eficiencia y optimización en redes complejas de gran escala. Facilita la comprensión del comportamiento de las rutas y conexiones en el sistema, brindando insights valiosos para optimizar rutas, recursos y estructuras de red.</p>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        document.querySelectorAll(\"h2\").forEach(header => {\n",
              "            header.addEventListener(\"click\", () => {\n",
              "                const content = header.nextElementSibling;\n",
              "                if (content.style.display === \"none\" || content.style.display === \"\") {\n",
              "                    content.style.display = \"block\";\n",
              "                } else {\n",
              "                    content.style.display = \"none\";\n",
              "                }\n",
              "            });\n",
              "        });\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import display, HTML\n",
        "\n",
        "# Contenido HTML con secciones colapsables para Google Colab\n",
        "html_content = \"\"\"\n",
        "<!DOCTYPE html>\n",
        "<html lang=\"es\">\n",
        "<head>\n",
        "    <meta charset=\"UTF-8\">\n",
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
        "    <title>Conclusiones y Futuro del Algoritmo de Dijkstra en Big Data</title>\n",
        "    <style>\n",
        "        body {\n",
        "            font-family: Arial, sans-serif;\n",
        "            line-height: 1.6;\n",
        "            color: #333;\n",
        "            margin: 20px;\n",
        "            background-color: #f4f4f9;\n",
        "        }\n",
        "        h1 {\n",
        "            color: #0056b3;\n",
        "            text-align: center;\n",
        "            font-size: 2.5em;\n",
        "            margin-bottom: 20px;\n",
        "        }\n",
        "        h2 {\n",
        "            color: #333;\n",
        "            font-size: 1.6em;\n",
        "            cursor: pointer;\n",
        "            background-color: #e0f7fa;\n",
        "            padding: 10px;\n",
        "            border-radius: 8px;\n",
        "            margin-top: 30px;\n",
        "        }\n",
        "        p, ul, li {\n",
        "            font-size: 1.1em;\n",
        "            margin-bottom: 15px;\n",
        "        }\n",
        "        ul {\n",
        "            list-style-type: disc;\n",
        "            margin-left: 20px;\n",
        "        }\n",
        "        .content {\n",
        "            display: none;\n",
        "            margin-top: 10px;\n",
        "            padding-left: 10px;\n",
        "        }\n",
        "    </style>\n",
        "</head>\n",
        "<body>\n",
        "\n",
        "    <h1>Conclusiones y Futuro del Algoritmo de Dijkstra en Big Data</h1>\n",
        "\n",
        "    <h2 onclick=\"toggleContent('content1')\">9.1 La versatilidad de Dijkstra en la teoría de grafos y Big Data</h2>\n",
        "    <div id=\"content1\" class=\"content\">\n",
        "        <p>El algoritmo de Dijkstra ha demostrado ser una herramienta fundamental en la teoría de grafos y en la optimización de redes, manteniéndose relevante desde su creación en 1956. Su capacidad para encontrar caminos mínimos en grafos ponderados lo convierte en una solución versátil en múltiples aplicaciones, desde la optimización de rutas en redes logísticas hasta la recomendación de conexiones en redes sociales.</p>\n",
        "        <p>En el contexto de Big Data, la adaptación de Dijkstra mediante sistemas distribuidos como Apache Giraph y Pregel ha permitido extender su aplicación a redes de gran escala. Este tipo de adaptación ha mostrado que, con las técnicas adecuadas, Dijkstra puede superar sus limitaciones en términos de escalabilidad y eficiencia.</p>\n",
        "    </div>\n",
        "\n",
        "    <h2 onclick=\"toggleContent('content2')\">9.2 Innovación y evolución en herramientas de grafos para grandes volúmenes de datos</h2>\n",
        "    <div id=\"content2\" class=\"content\">\n",
        "        <p>El avance en herramientas de procesamiento de grafos, como Apache Giraph y Google Pregel, ha impulsado la evolución del análisis de grafos y ha abierto nuevas posibilidades para la aplicación de algoritmos como Dijkstra en Big Data. Estas herramientas no solo han permitido la adaptación del algoritmo para entornos distribuidos, sino que también han introducido innovaciones en la forma en que los grafos de gran escala son gestionados y procesados.</p>\n",
        "        <ul>\n",
        "            <li><strong>Modelos de procesamiento paralelo y centrado en el vértice</strong>: Gracias al modelo de \"vertex-centric\" introducido por Pregel y adoptado por Giraph, los algoritmos de grafos pueden distribuirse en múltiples máquinas, permitiendo el procesamiento en paralelo y reduciendo drásticamente el tiempo de ejecución.</li>\n",
        "            <li><strong>Desarrollo de algoritmos híbridos y especializados</strong>: La necesidad de manejar grandes volúmenes de datos ha llevado al desarrollo de algoritmos híbridos que combinan Dijkstra con otros enfoques, como el algoritmo A* o el uso de heurísticas para optimizar el cálculo de rutas.</li>\n",
        "            <li><strong>Integración con plataformas de Big Data</strong>: La capacidad de Giraph para ejecutarse sobre Hadoop ha facilitado su integración en infraestructuras de Big Data ya establecidas, permitiendo que las organizaciones adopten estas herramientas sin necesidad de invertir en plataformas de procesamiento adicionales.</li>\n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <h2 onclick=\"toggleContent('content3')\">9.3 Retos futuros y oportunidades en la optimización de redes distribuidas</h2>\n",
        "    <div id=\"content3\" class=\"content\">\n",
        "        <p>A medida que el volumen y la complejidad de los datos continúan creciendo, el uso de algoritmos de caminos mínimos en redes distribuidas presenta nuevos retos y oportunidades. Los siguientes puntos destacan algunos de los desafíos clave y posibles direcciones de investigación y desarrollo:</p>\n",
        "        <ul>\n",
        "            <li><strong>Optimización de la eficiencia en redes distribuidas</strong>: Aunque las adaptaciones de Dijkstra permiten procesar grandes grafos en sistemas distribuidos, los costos de comunicación y sincronización entre nodos pueden representar un desafío en redes de gran escala.</li>\n",
        "            <li><strong>Desarrollo de algoritmos más dinámicos y adaptativos</strong>: En muchas aplicaciones de Big Data, los grafos son dinámicos, con nodos y aristas que cambian constantemente.</li>\n",
        "            <li><strong>Mayor integración de inteligencia artificial y aprendizaje automático</strong>: Con la incorporación de técnicas de IA y aprendizaje automático, los algoritmos de caminos mínimos pueden beneficiarse de modelos predictivos que anticipen cambios en las rutas y optimicen las decisiones en tiempo real.</li>\n",
        "            <li><strong>Adaptación a infraestructuras de computación en la nube</strong>: A medida que las infraestructuras de Big Data migran hacia la computación en la nube, será necesario adaptar las implementaciones de Dijkstra y otros algoritmos de grafos para aprovechar mejor los recursos escalables y distribuidos que ofrece la nube.</li>\n",
        "        </ul>\n",
        "    </div>\n",
        "\n",
        "    <script>\n",
        "        function toggleContent(id) {\n",
        "            var content = document.getElementById(id);\n",
        "            if (content.style.display === \"none\" || content.style.display === \"\") {\n",
        "                content.style.display = \"block\";\n",
        "            } else {\n",
        "                content.style.display = \"none\";\n",
        "            }\n",
        "        }\n",
        "        document.querySelectorAll('.content').forEach(div => div.style.display = 'none');\n",
        "    </script>\n",
        "</body>\n",
        "</html>\n",
        "\"\"\"\n",
        "\n",
        "# Mostrar el contenido HTML en Google Colab\n",
        "display(HTML(html_content))\n"
      ],
      "metadata": {
        "id": "NTBDoVKNqHsd",
        "outputId": "021ecbe6-0ae5-4cc1-e7e6-6946763fd243",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 358
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<!DOCTYPE html>\n",
              "<html lang=\"es\">\n",
              "<head>\n",
              "    <meta charset=\"UTF-8\">\n",
              "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
              "    <title>Conclusiones y Futuro del Algoritmo de Dijkstra en Big Data</title>\n",
              "    <style>\n",
              "        body {\n",
              "            font-family: Arial, sans-serif;\n",
              "            line-height: 1.6;\n",
              "            color: #333;\n",
              "            margin: 20px;\n",
              "            background-color: #f4f4f9;\n",
              "        }\n",
              "        h1 {\n",
              "            color: #0056b3;\n",
              "            text-align: center;\n",
              "            font-size: 2.5em;\n",
              "            margin-bottom: 20px;\n",
              "        }\n",
              "        h2 {\n",
              "            color: #333;\n",
              "            font-size: 1.6em;\n",
              "            cursor: pointer;\n",
              "            background-color: #e0f7fa;\n",
              "            padding: 10px;\n",
              "            border-radius: 8px;\n",
              "            margin-top: 30px;\n",
              "        }\n",
              "        p, ul, li {\n",
              "            font-size: 1.1em;\n",
              "            margin-bottom: 15px;\n",
              "        }\n",
              "        ul {\n",
              "            list-style-type: disc;\n",
              "            margin-left: 20px;\n",
              "        }\n",
              "        .content {\n",
              "            display: none;\n",
              "            margin-top: 10px;\n",
              "            padding-left: 10px;\n",
              "        }\n",
              "    </style>\n",
              "</head>\n",
              "<body>\n",
              "\n",
              "    <h1>Conclusiones y Futuro del Algoritmo de Dijkstra en Big Data</h1>\n",
              "\n",
              "    <h2 onclick=\"toggleContent('content1')\">9.1 La versatilidad de Dijkstra en la teoría de grafos y Big Data</h2>\n",
              "    <div id=\"content1\" class=\"content\">\n",
              "        <p>El algoritmo de Dijkstra ha demostrado ser una herramienta fundamental en la teoría de grafos y en la optimización de redes, manteniéndose relevante desde su creación en 1956. Su capacidad para encontrar caminos mínimos en grafos ponderados lo convierte en una solución versátil en múltiples aplicaciones, desde la optimización de rutas en redes logísticas hasta la recomendación de conexiones en redes sociales.</p>\n",
              "        <p>En el contexto de Big Data, la adaptación de Dijkstra mediante sistemas distribuidos como Apache Giraph y Pregel ha permitido extender su aplicación a redes de gran escala. Este tipo de adaptación ha mostrado que, con las técnicas adecuadas, Dijkstra puede superar sus limitaciones en términos de escalabilidad y eficiencia.</p>\n",
              "    </div>\n",
              "\n",
              "    <h2 onclick=\"toggleContent('content2')\">9.2 Innovación y evolución en herramientas de grafos para grandes volúmenes de datos</h2>\n",
              "    <div id=\"content2\" class=\"content\">\n",
              "        <p>El avance en herramientas de procesamiento de grafos, como Apache Giraph y Google Pregel, ha impulsado la evolución del análisis de grafos y ha abierto nuevas posibilidades para la aplicación de algoritmos como Dijkstra en Big Data. Estas herramientas no solo han permitido la adaptación del algoritmo para entornos distribuidos, sino que también han introducido innovaciones en la forma en que los grafos de gran escala son gestionados y procesados.</p>\n",
              "        <ul>\n",
              "            <li><strong>Modelos de procesamiento paralelo y centrado en el vértice</strong>: Gracias al modelo de \"vertex-centric\" introducido por Pregel y adoptado por Giraph, los algoritmos de grafos pueden distribuirse en múltiples máquinas, permitiendo el procesamiento en paralelo y reduciendo drásticamente el tiempo de ejecución.</li>\n",
              "            <li><strong>Desarrollo de algoritmos híbridos y especializados</strong>: La necesidad de manejar grandes volúmenes de datos ha llevado al desarrollo de algoritmos híbridos que combinan Dijkstra con otros enfoques, como el algoritmo A* o el uso de heurísticas para optimizar el cálculo de rutas.</li>\n",
              "            <li><strong>Integración con plataformas de Big Data</strong>: La capacidad de Giraph para ejecutarse sobre Hadoop ha facilitado su integración en infraestructuras de Big Data ya establecidas, permitiendo que las organizaciones adopten estas herramientas sin necesidad de invertir en plataformas de procesamiento adicionales.</li>\n",
              "        </ul>\n",
              "    </div>\n",
              "\n",
              "    <h2 onclick=\"toggleContent('content3')\">9.3 Retos futuros y oportunidades en la optimización de redes distribuidas</h2>\n",
              "    <div id=\"content3\" class=\"content\">\n",
              "        <p>A medida que el volumen y la complejidad de los datos continúan creciendo, el uso de algoritmos de caminos mínimos en redes distribuidas presenta nuevos retos y oportunidades. Los siguientes puntos destacan algunos de los desafíos clave y posibles direcciones de investigación y desarrollo:</p>\n",
              "        <ul>\n",
              "            <li><strong>Optimización de la eficiencia en redes distribuidas</strong>: Aunque las adaptaciones de Dijkstra permiten procesar grandes grafos en sistemas distribuidos, los costos de comunicación y sincronización entre nodos pueden representar un desafío en redes de gran escala.</li>\n",
              "            <li><strong>Desarrollo de algoritmos más dinámicos y adaptativos</strong>: En muchas aplicaciones de Big Data, los grafos son dinámicos, con nodos y aristas que cambian constantemente.</li>\n",
              "            <li><strong>Mayor integración de inteligencia artificial y aprendizaje automático</strong>: Con la incorporación de técnicas de IA y aprendizaje automático, los algoritmos de caminos mínimos pueden beneficiarse de modelos predictivos que anticipen cambios en las rutas y optimicen las decisiones en tiempo real.</li>\n",
              "            <li><strong>Adaptación a infraestructuras de computación en la nube</strong>: A medida que las infraestructuras de Big Data migran hacia la computación en la nube, será necesario adaptar las implementaciones de Dijkstra y otros algoritmos de grafos para aprovechar mejor los recursos escalables y distribuidos que ofrece la nube.</li>\n",
              "        </ul>\n",
              "    </div>\n",
              "\n",
              "    <script>\n",
              "        function toggleContent(id) {\n",
              "            var content = document.getElementById(id);\n",
              "            if (content.style.display === \"none\" || content.style.display === \"\") {\n",
              "                content.style.display = \"block\";\n",
              "            } else {\n",
              "                content.style.display = \"none\";\n",
              "            }\n",
              "        }\n",
              "        document.querySelectorAll('.content').forEach(div => div.style.display = 'none');\n",
              "    </script>\n",
              "</body>\n",
              "</html>\n"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}